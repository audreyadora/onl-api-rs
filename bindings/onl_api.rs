/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const AIM_CONFIG_INCLUDE_LOGGING: u32 = 1;
pub const AIM_CONFIG_PORTING_STDLIB: u32 = 1;
pub const AIM_CONFIG_PORTING_INCLUDE_STDLIB_HEADERS: u32 = 1;
pub const AIM_CONFIG_LOG_MESSAGE_SIZE: u32 = 256;
pub const AIM_CONFIG_LOG_INCLUDE_LINUX_TIMESTAMP: u32 = 1;
pub const AIM_CONFIG_LOG_INCLUDE_ENV_VARIABLES: u32 = 1;
pub const AIM_CONFIG_PVS_INCLUDE_TTY: u32 = 1;
pub const AIM_CONFIG_LOG_INCLUDE_TTY_COLOR: u32 = 1;
pub const AIM_CONFIG_INCLUDE_MODULES_INIT: u32 = 0;
pub const AIM_CONFIG_INCLUDE_MODULES_DENIT: u32 = 0;
pub const AIM_CONFIG_INCLUDE_MAIN: u32 = 0;
pub const AIM_CONFIG_INCLUDE_ENV_ARGV: u32 = 0;
pub const AIM_CONFIG_ENV_ARGV_NAME: &[u8; 13] = b"AIM_ENV_ARGV\0";
pub const AIM_CONFIG_INCLUDE_VALGRIND: u32 = 0;
pub const AIM_CONFIG_INCLUDE_DAEMONIZE: u32 = 0;
pub const AIM_CONFIG_INCLUDE_PVS_SYSLOG: u32 = 0;
pub const AIM_CONFIG_PVS_SYSLOG_IDENT_DEFAULT: &[u8; 4] = b"AIM\0";
pub const AIM_CONFIG_INCLUDE_OS_POSIX: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const AIM_DATATYPE_ERROR: i32 = -1;
pub const AIM_DATATYPE_OK: u32 = 0;
pub const ONLP_CONFIG_INCLUDE_LOGGING: u32 = 1;
pub const ONLP_CONFIG_LOG_CUSTOM_BITS_DEFAULT: u32 = 0;
pub const ONLP_CONFIG_PORTING_STDLIB: u32 = 1;
pub const ONLP_CONFIG_PORTING_INCLUDE_STDLIB_HEADERS: u32 = 1;
pub const ONLP_CONFIG_INCLUDE_UCLI: u32 = 0;
pub const ONLP_CONFIG_INCLUDE_PLATFORM_ERROR_CHECK: u32 = 1;
pub const ONLP_CONFIG_INCLUDE_SHLOCK_GLOBAL_INIT: u32 = 0;
pub const ONLP_CONFIG_INCLUDE_PLATFORM_STATIC: u32 = 0;
pub const ONLP_CONFIG_PLATFORM_STATIC: &[u8; 8] = b"unknown\0";
pub const ONLP_CONFIG_PLATFORM_FILENAME: &[u8; 18] = b"/etc/onl/platform\0";
pub const ONLP_CONFIG_INCLUDE_PLATFORM_OVERRIDES: u32 = 1;
pub const ONLP_CONFIG_CONFIGURATION_FILENAME: &[u8; 15] = b"/etc/onlp.conf\0";
pub const ONLP_CONFIG_CONFIGURATION_ENV: &[u8; 10] = b"ONLP_CONF\0";
pub const ONLP_CONFIG_INCLUDE_API_LOCK: u32 = 1;
pub const ONLP_CONFIG_API_LOCK_GLOBAL_SHARED: u32 = 1;
pub const ONLP_CONFIG_API_LOCK_TIMEOUT: u32 = 60000000;
pub const ONLP_CONFIG_INFO_STR_MAX: u32 = 64;
pub const ONLP_CONFIG_INCLUDE_THERMAL_THRESHOLDS: u32 = 0;
pub const ONLP_CONFIG_INCLUDE_API_PROFILING: u32 = 0;
pub const OFSET_AI: u32 = 0;
pub const OFSET_AO: u32 = 16;
pub const OFSET_DI: u32 = 32;
pub const OFSET_DO: u32 = 48;
pub const OFSET_CNT: u32 = 64;
pub const OFSET_MEM: u32 = 80;
pub const OFSET_ECU: u32 = 128;
pub const ECU_RESET: u32 = 0;
pub const ECU_ENABLEINT: u32 = 1;
pub const ECU_DISABLEINT: u32 = 2;
pub const ECU_CONNECT: u32 = 3;
pub const ECU_COMBINATION: u32 = 4;
pub const ECU_GENERALCOMMAND1: u32 = 5;
pub const ECU_GENERALCOMMAND2: u32 = 6;
pub const ECU_GENERALCOMMAND3: u32 = 7;
pub const ECU_GENERALCOMMAND4: u32 = 8;
pub const ECU_DELAYTIME: u32 = 9;
pub const ECU_EMERGENCY: u32 = 10;
pub const ECU_AIEMERGENCY: u32 = 16;
pub const ECU_AOEMERGENCY: u32 = 17;
pub const ECU_SRAMTEST: u32 = 18;
pub const ECU_SYNCBUS: u32 = 24;
pub const MEM_ALLRESET: u32 = 0;
pub const MEM_AITRANSFERTYPE: u32 = 1;
pub const MEM_AOTRANSFERTYPE: u32 = 2;
pub const MEM_AIWT: u32 = 3;
pub const MEM_AIRT: u32 = 4;
pub const MEM_AOWT: u32 = 5;
pub const MEM_AORT: u32 = 6;
pub const MEM_AICLEAR: u32 = 7;
pub const MEM_AOCLEAR: u32 = 8;
pub const MEM_AIMEMORYTYPE: u32 = 9;
pub const MEM_AOMEMORYTYPE: u32 = 10;
pub const MEM_AIFIFOREAD: u32 = 11;
pub const MEM_AOFIFOREAD: u32 = 12;
pub const MEM_AIFIFO1DEBUG: u32 = 13;
pub const MEM_AIFIFO2DEBUG: u32 = 14;
pub const MEM_DDRTEST: u32 = 15;
pub const MEM_AICOMPTYPE: u32 = 16;
pub const MEM_AICOMPDATA: u32 = 17;
pub const MEM_AITRGWP: u32 = 18;
pub const MEM_AITRGRP: u32 = 19;
pub const MEM_AIMAXWP: u32 = 20;
pub const MEM_AIATTACHEDDATA: u32 = 21;
pub const MEM_AISTOPTRGDATA: u32 = 22;
pub const MEM_AISWITCH: u32 = 24;
pub const MEM_AOCOMPTYPE: u32 = 32;
pub const MEM_AOCOMPDATA: u32 = 33;
pub const MEM_AOTRGWP: u32 = 34;
pub const MEM_AOTRGRP: u32 = 35;
pub const MEM_AOMAXRP: u32 = 36;
pub const MEM_AOATTACHEDDATA: u32 = 37;
pub const MEM_AOBANKRP: u32 = 38;
pub const AI_RESET: u32 = 0;
pub const AI_OPEN: u32 = 1;
pub const AI_CLOSE: u32 = 2;
pub const AI_CLOCK: u32 = 3;
pub const AI_SCANCLOCK: u32 = 4;
pub const AI_CHANNELS: u32 = 5;
pub const AI_SEQUENCE: u32 = 6;
pub const AI_METHOD: u32 = 7;
pub const AI_RANGE: u32 = 8;
pub const AI_BTSAMPLING: u32 = 9;
pub const AI_ATSAMPLING: u32 = 10;
pub const AI_REPEAT: u32 = 11;
pub const AI_CHANNELMODE: u32 = 12;
pub const AI_CHANNELGATE: u32 = 13;
pub const AI_ADJUSTMENT: u32 = 32;
pub const AI_EEPROM: u32 = 33;
pub const AI_LEVELTRGTYPE: u32 = 34;
pub const AI_LEVELTRGCHANNEL: u32 = 35;
pub const AI_LEVELTRGSTATE: u32 = 36;
pub const AI_LEVEL: u32 = 37;
pub const AI_COMPSAMPLING: u32 = 38;
pub const AI_COMPREPEAT: u32 = 39;
pub const AO_RESET: u32 = 0;
pub const AO_OPEN: u32 = 1;
pub const AO_CLOSE: u32 = 2;
pub const AO_CLOCK: u32 = 3;
pub const AO_CHANNELS: u32 = 5;
pub const AO_SEQUENCE: u32 = 6;
pub const AO_RANGE: u32 = 8;
pub const AO_BTSAMPLING: u32 = 9;
pub const AO_ATSAMPLING: u32 = 10;
pub const AO_REPEAT: u32 = 11;
pub const AO_CHANNELMODE: u32 = 12;
pub const AO_REPEATCOUNT: u32 = 13;
pub const AO_ADJUSTMENT: u32 = 32;
pub const AO_EEPROM: u32 = 33;
pub const AO_LEVELTRGTYPE: u32 = 34;
pub const AO_LEVELTRGCHANNEL: u32 = 35;
pub const AO_LEVELTRGSTATE: u32 = 36;
pub const AO_LEVEL: u32 = 37;
pub const AO_COMPSAMPLING: u32 = 38;
pub const AO_COMPREPEAT: u32 = 39;
pub const AO_EX1: u32 = 40;
pub const AO_EX2: u32 = 41;
pub const AO_EX3: u32 = 42;
pub const CNT_RESET: u32 = 0;
pub const CNT_OPEN: u32 = 1;
pub const CNT_CLOSE: u32 = 2;
pub const CNT_CLOCK: u32 = 3;
pub const CNT_MODE: u32 = 4;
pub const CNT_CURRENT: u32 = 5;
pub const CNT_LOAD: u32 = 6;
pub const CNT_COMPARISON: u32 = 7;
pub const CNT_EMERGENCY: u32 = 8;
pub const DI_RESET: u32 = 0;
pub const DI_EDGE: u32 = 1;
pub const DI_FILTER: u32 = 2;
pub const DI_DIRECTION: u32 = 3;
pub const DI_SERIAL: u32 = 4;
pub const DI_PARALLELL: u32 = 5;
pub const DO_RESET: u32 = 0;
pub const DO_CFG: u32 = 1;
pub const DO_SIGCFG: u32 = 2;
pub const DO_PLS: u32 = 3;
pub const DO_SERIAL: u32 = 4;
pub const DO_PARALLELL: u32 = 5;
pub const DO_SERIALCFG: u32 = 6;
pub const DO_PWM: u32 = 7;
pub const ONLPLIB_CONFIG_INCLUDE_LOGGING: u32 = 1;
pub const ONLPLIB_CONFIG_LOG_CUSTOM_BITS_DEFAULT: u32 = 0;
pub const ONLPLIB_CONFIG_PORTING_STDLIB: u32 = 1;
pub const ONLPLIB_CONFIG_PORTING_INCLUDE_STDLIB_HEADERS: u32 = 1;
pub const ONLPLIB_CONFIG_INCLUDE_UCLI: u32 = 0;
pub const ONLPLIB_CONFIG_INCLUDE_I2C: u32 = 1;
pub const ONLPLIB_CONFIG_I2C_BLOCK_SIZE: u32 = 32;
pub const ONLPLIB_CONFIG_I2C_READ_RETRY_COUNT: u32 = 16;
pub const ONLPLIB_CONFIG_I2C_USE_CUSTOM_HEADER: u32 = 1;
pub const ONLPLIB_CONFIG_INCLUDE_I2C_SMBUS: u32 = 0;
pub const ONLP_OID_DESC_SIZE: u32 = 128;
pub const ONLP_OID_TABLE_SIZE: u32 = 128;
pub const SFF_CONFIG_INCLUDE_LOGGING: u32 = 1;
pub const SFF_CONFIG_LOG_CUSTOM_BITS_DEFAULT: u32 = 0;
pub const SFF_CONFIG_PORTING_STDLIB: u32 = 1;
pub const SFF_CONFIG_PORTING_INCLUDE_STDLIB_HEADERS: u32 = 1;
pub const SFF_CONFIG_INCLUDE_UCLI: u32 = 0;
pub const SFF_CONFIG_INCLUDE_SFF_TOOL: u32 = 0;
pub const SFF_CONFIG_INCLUDE_EXT_CC_CHECK: u32 = 0;
pub const SFF_CONFIG_INCLUDE_DATABASE: u32 = 1;
pub const ONLP_THERMAL_CAPS_ALL: u32 = 15;
#[doc = " Configuration settings structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_config_settings_s {
    #[doc = " name"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " value"]
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_config_settings_s"][::std::mem::size_of::<aim_config_settings_s>() - 16usize];
    ["Alignment of aim_config_settings_s"]
        [::std::mem::align_of::<aim_config_settings_s>() - 8usize];
    ["Offset of field: aim_config_settings_s::name"]
        [::std::mem::offset_of!(aim_config_settings_s, name) - 0usize];
    ["Offset of field: aim_config_settings_s::value"]
        [::std::mem::offset_of!(aim_config_settings_s, value) - 8usize];
};
#[doc = " Configuration settings structure."]
pub type aim_config_settings_t = aim_config_settings_s;
extern "C" {
    #[doc = " Configuration settings table. */\n/** aim_config_settings table."]
    pub static mut aim_config_settings: [aim_config_settings_t; 0usize];
}
extern "C" {
    #[doc = " @brief Lookup a configuration setting.\n @param setting The name of the configuration option to lookup."]
    pub fn aim_config_lookup(
        setting: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Show the compile-time configuration.\n @param pvs The output stream."]
    pub fn aim_config_show(pvs: *mut aim_pvs_s) -> ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 352usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
#[doc = " Sometimes we must pass va_lists as pointers to be shared\n between different functions processing (and updating) the same\n va_list.\n\n This is allowed in the C99 specification, but\n actually doing it becomes problematic when va_list is defined\n as an array, rather than a pointer, as taking the address of the local\n array is not equivalent to \"va_list*\". This has nothing to do with\n va_lists per se, but the way C handles arrays as parameters to functions.\n\n We get around this portability problem by defining a structure to\n contain the va_list, and pass a pointer to that structure\n instead.\n\n We could have defined a macro to create a va_list* from a va_list,\n but this would have to be configured by hand, and on architectures\n where va_list is a pointer, you would not see a warning or a bug\n to indicate you have introduced a portability problem for other\n architectures.\n\n If we always pass aim_va_list_t*, instead of va_list*, we will\n always get typechecking and portability for all platforms.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_va_list_s {
    #[doc = " The va_list structure"]
    pub val: va_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_va_list_s"][::std::mem::size_of::<aim_va_list_s>() - 8usize];
    ["Alignment of aim_va_list_s"][::std::mem::align_of::<aim_va_list_s>() - 8usize];
    ["Offset of field: aim_va_list_s::val"][::std::mem::offset_of!(aim_va_list_s, val) - 0usize];
};
#[doc = " Sometimes we must pass va_lists as pointers to be shared\n between different functions processing (and updating) the same\n va_list.\n\n This is allowed in the C99 specification, but\n actually doing it becomes problematic when va_list is defined\n as an array, rather than a pointer, as taking the address of the local\n array is not equivalent to \"va_list*\". This has nothing to do with\n va_lists per se, but the way C handles arrays as parameters to functions.\n\n We get around this portability problem by defining a structure to\n contain the va_list, and pass a pointer to that structure\n instead.\n\n We could have defined a macro to create a va_list* from a va_list,\n but this would have to be configured by hand, and on architectures\n where va_list is a pointer, you would not see a warning or a bug\n to indicate you have introduced a portability problem for other\n architectures.\n\n If we always pass aim_va_list_t*, instead of va_list*, we will\n always get typechecking and portability for all platforms.\n"]
pub type aim_va_list_t = aim_va_list_s;
#[doc = " Provides a common structure definition for facilitating\n polymorphic interfaces where appropriate."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_object_s {
    #[doc = " Unique Object Identifier (String)\n\n Set this to a statically allocated string buffer\n in your own compilation unit.\n\n The ADDRESS of the string is what guarantees the uncoordinated\n uniqueness of your object id, not the CONTENTS of the string.\n\n The CONTENTS of the string are only for humans."]
    pub id: *const ::std::os::raw::c_char,
    #[doc = " Optional Object Subtype.\n\n Set to whatever makes sense for your object."]
    pub subtype: ::std::os::raw::c_int,
    #[doc = " Object data pointer. Optional."]
    pub cookie: *mut ::std::os::raw::c_void,
    #[doc = " You can specify a destructor for your object."]
    pub destructor: ::std::option::Option<unsafe extern "C" fn(object: *mut aim_object_s)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_object_s"][::std::mem::size_of::<aim_object_s>() - 32usize];
    ["Alignment of aim_object_s"][::std::mem::align_of::<aim_object_s>() - 8usize];
    ["Offset of field: aim_object_s::id"][::std::mem::offset_of!(aim_object_s, id) - 0usize];
    ["Offset of field: aim_object_s::subtype"]
        [::std::mem::offset_of!(aim_object_s, subtype) - 8usize];
    ["Offset of field: aim_object_s::cookie"]
        [::std::mem::offset_of!(aim_object_s, cookie) - 16usize];
    ["Offset of field: aim_object_s::destructor"]
        [::std::mem::offset_of!(aim_object_s, destructor) - 24usize];
};
#[doc = " Provides a common structure definition for facilitating\n polymorphic interfaces where appropriate."]
pub type aim_object_t = aim_object_s;
#[doc = " Typedef for destructors."]
pub type aim_object_dtor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut aim_object_t)>;
extern "C" {
    #[doc = " @brief Allocate an aim_object.\n @param size The size of the object.\n @param id The object id\n @param subtype The object subtype\n @param cookie The object cookie\n @param dtor The object destructor."]
    pub fn aim_object_create(
        size: ::std::os::raw::c_uint,
        id: *const ::std::os::raw::c_char,
        subtype: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        dtor: aim_object_dtor,
    ) -> *mut aim_object_t;
}
extern "C" {
    #[doc = " @brief Destroy an aim_object.\n @param obj The object."]
    pub fn aim_object_destroy(obj: *mut aim_object_t);
}
#[doc = " Map a string to an integer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_map_si_t {
    #[doc = " String value"]
    pub s: *const ::std::os::raw::c_char,
    #[doc = " Integer value"]
    pub i: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_map_si_t"][::std::mem::size_of::<aim_map_si_t>() - 16usize];
    ["Alignment of aim_map_si_t"][::std::mem::align_of::<aim_map_si_t>() - 8usize];
    ["Offset of field: aim_map_si_t::s"][::std::mem::offset_of!(aim_map_si_t, s) - 0usize];
    ["Offset of field: aim_map_si_t::i"][::std::mem::offset_of!(aim_map_si_t, i) - 8usize];
};
extern "C" {
    #[doc = " @brief Map a string to an integer.\n @param [out] rv The mapped integer value.\n @param s The string to map.\n @param maps The map table.\n @param count The number of entries in the map table.\n\n @returns 1 if the mapping was successful.\n @returns 0 if the mapping failed.\n\n @note If count is 0, maps is assumed to be terminated with a null entry."]
    pub fn aim_map_si_s(
        rv: *mut ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        maps: *mut aim_map_si_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Map an integer to a string.\n @param [out] rv The mapped string value.\n @param i The integer to map.\n @param maps The map table.\n @param count The number of entries in the map table.\n\n @returns 1 if the mapping was successful.\n @returns 0 if the mapping failed.\n\n @note If count is 0, maps is assumed to be terminated with a null entry."]
    pub fn aim_map_si_i(
        rv: *mut *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
        maps: *mut aim_map_si_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const aim_log_flag_e_AIM_LOG_FLAG_MSG: aim_log_flag_e = 0;
pub const aim_log_flag_e_AIM_LOG_FLAG_FATAL: aim_log_flag_e = 1;
pub const aim_log_flag_e_AIM_LOG_FLAG_ERROR: aim_log_flag_e = 2;
pub const aim_log_flag_e_AIM_LOG_FLAG_WARN: aim_log_flag_e = 3;
pub const aim_log_flag_e_AIM_LOG_FLAG_INFO: aim_log_flag_e = 4;
pub const aim_log_flag_e_AIM_LOG_FLAG_VERBOSE: aim_log_flag_e = 5;
pub const aim_log_flag_e_AIM_LOG_FLAG_TRACE: aim_log_flag_e = 6;
pub const aim_log_flag_e_AIM_LOG_FLAG_INTERNAL: aim_log_flag_e = 7;
pub const aim_log_flag_e_AIM_LOG_FLAG_BUG: aim_log_flag_e = 8;
pub const aim_log_flag_e_AIM_LOG_FLAG_FTRACE: aim_log_flag_e = 9;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_EMERG: aim_log_flag_e = 10;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_ALERT: aim_log_flag_e = 11;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_CRIT: aim_log_flag_e = 12;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_ERROR: aim_log_flag_e = 13;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_WARN: aim_log_flag_e = 14;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_NOTICE: aim_log_flag_e = 15;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_INFO: aim_log_flag_e = 16;
pub const aim_log_flag_e_AIM_LOG_FLAG_SYSLOG_DEBUG: aim_log_flag_e = 17;
pub const aim_log_flag_e_AIM_LOG_FLAG_LAST: aim_log_flag_e = 17;
pub const aim_log_flag_e_AIM_LOG_FLAG_COUNT: aim_log_flag_e = 18;
pub const aim_log_flag_e_AIM_LOG_FLAG_INVALID: aim_log_flag_e = -1;
#[doc = " aim_log_flag"]
pub type aim_log_flag_e = ::std::os::raw::c_int;
#[doc = " aim_log_flag"]
pub use self::aim_log_flag_e as aim_log_flag_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn aim_log_flag_name(e: aim_log_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn aim_log_flag_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut aim_log_flag_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn aim_log_flag_desc(e: aim_log_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " aim_log_flag_map table."]
    pub static mut aim_log_flag_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " aim_log_flag_desc_map table."]
    pub static mut aim_log_flag_desc_map: [aim_map_si_t; 0usize];
}
#[doc = " @brief Log function typedef, to be used by aim_logf_set.\n @param cookie To be passed to logging function.\n @param flag Associated log flag.\n @param str String to log."]
pub type aim_log_f = ::std::option::Option<
    unsafe extern "C" fn(
        cookie: *mut ::std::os::raw::c_void,
        flag: aim_log_flag_t,
        str_: *const ::std::os::raw::c_char,
    ),
>;
#[doc = " aim_pvs_t"]
pub type aim_pvs_t = aim_pvs_s;
#[doc = " All fundamental output vectors share this signature."]
pub type aim_vprint_f = ::std::option::Option<
    unsafe extern "C" fn(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " This structure represents a fundamental output stream.\n All functions which produce output should be written to\n accept a pointer to this structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_pvs_s {
    #[doc = " AIM object."]
    pub object: aim_object_t,
    #[doc = " Description"]
    pub description: *mut ::std::os::raw::c_char,
    #[doc = " This is the vector that will eventually receive the output for\n this stream."]
    pub vprintf: aim_vprint_f,
    #[doc = " Any output stream can be enabled or disabled."]
    pub enabled: ::std::os::raw::c_int,
    #[doc = " Call counter"]
    pub counter: u32,
    #[doc = " Optional:\n returns whether this PVS can be considered a tty, where applicable"]
    pub isatty:
        ::std::option::Option<unsafe extern "C" fn(pvs: *mut aim_pvs_t) -> ::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_pvs_s"][::std::mem::size_of::<aim_pvs_s>() - 64usize];
    ["Alignment of aim_pvs_s"][::std::mem::align_of::<aim_pvs_s>() - 8usize];
    ["Offset of field: aim_pvs_s::object"][::std::mem::offset_of!(aim_pvs_s, object) - 0usize];
    ["Offset of field: aim_pvs_s::description"]
        [::std::mem::offset_of!(aim_pvs_s, description) - 32usize];
    ["Offset of field: aim_pvs_s::vprintf"][::std::mem::offset_of!(aim_pvs_s, vprintf) - 40usize];
    ["Offset of field: aim_pvs_s::enabled"][::std::mem::offset_of!(aim_pvs_s, enabled) - 48usize];
    ["Offset of field: aim_pvs_s::counter"][::std::mem::offset_of!(aim_pvs_s, counter) - 52usize];
    ["Offset of field: aim_pvs_s::isatty"][::std::mem::offset_of!(aim_pvs_s, isatty) - 56usize];
};
extern "C" {
    #[doc = " Use this builtin PVS structure for output to stdout."]
    pub static mut aim_pvs_stdout: aim_pvs_t;
}
extern "C" {
    #[doc = " Use this builtin PVS structure for output to stderr."]
    pub static mut aim_pvs_stderr: aim_pvs_t;
}
extern "C" {
    #[doc = " Use this builtin PVS structure for discarding output."]
    pub static mut aim_pvs_none: aim_pvs_t;
}
extern "C" {
    #[doc = " @brief printf-style output to any PVS.\n @param pvs The PVS output stream.\n @param fmt The format string.\n @note This does not include custom datatype processing.\n @note Most clients should call aim_printf() instead."]
    pub fn aim_pvs_printf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief vprintf-style output to any PVS.\n @param pvs The PVS output stream.\n @param fmt The format string.\n @param vargs The format arguments.\n @note This does not include custom datatype processing.\n @note Most clients should call aim_vprintf() instead."]
    pub fn aim_pvs_vprintf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief vprintf-style output to any PVS.\n @param pvs The PVS output stream.\n @param fmt The format string.\n @param vargs The AIM variable argument structure.\n @note This does not include custom datatype processing.\n @note Most clients should call aim_avprintf() instead."]
    pub fn aim_pvs_avprintf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: *mut aim_va_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Enable or disable output on the given PVS.\n @param pvs The PVS output stream.\n @param enable Enable/Disable state.\n\n @note All output for the PVS will be silently discarded when\n the PVS is disabled."]
    pub fn aim_pvs_enable(
        pvs: *mut aim_pvs_t,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Destroy a PVS object.\n @param pvs The object to destroy."]
    pub fn aim_pvs_destroy(pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " @brief Determine whether a PVS is a tty.\n @param pvs The object to query.\n @returns 1 If the object is a tty.\n @returns 0 If the object is not a tty.\n @returns -1 If unknown."]
    pub fn aim_pvs_isatty(pvs: *mut aim_pvs_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a string description of the given pvs.\n @param pvs The object to query.\n @returns A string describing the pvs. Do not modify or free."]
    pub fn aim_pvs_desc_get(pvs: *mut aim_pvs_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Log function for all pvs.\n @param cookie Pointer to relevant PVS.\n @param flag Associated log flag.\n @param str String to log."]
    pub fn aim_pvs_logf(
        cookie: *mut ::std::os::raw::c_void,
        flag: aim_log_flag_t,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " @brief Open a PVS FILE stream.\n @param path The filename to open.\n @param mode The open mode.\n\n @note the file will be closed when you call aim_pvs_destroy()"]
    pub fn aim_pvs_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut aim_pvs_t;
}
extern "C" {
    #[doc = " @brief Create a PVS which collects and buffers output.\n @note When finished, you should call aim_pvs_destroy()."]
    pub fn aim_pvs_buffer_create() -> *mut aim_pvs_t;
}
extern "C" {
    #[doc = " @brief the current size of the output.\n @param pvs The PVS"]
    pub fn aim_pvs_buffer_size(pvs: *mut aim_pvs_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the entire output buffer.\n @param pvs The pvs.\n @returns A new buffer containing the entire output.\n @note You must free the buffer when you're done."]
    pub fn aim_pvs_buffer_get(pvs: *mut aim_pvs_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Discard all output.\n @param pvs The pvs."]
    pub fn aim_pvs_buffer_reset(pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " @brief Iterate over all buffers.\n @param pvs The pvs.\n @param [out] size The size of the returned data.\n @returns The next buffer if available.\n @returns NULL if no more data is available.\n @note The returned pointer must not be freed."]
    pub fn aim_pvs_buffer_iterate(
        pvs: *mut aim_pvs_t,
        size: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief String duplication.\n @param s The string to duplicate.\n @returns The duplicated string.\n\n @note The strdup() function is not a C99 standard library function.\n We provide our own for portability."]
    pub fn aim_strdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Safe, reentrant strtok_r()\n @param str The string to tokenize.\n @param delim The delimiter list.\n @param saveptr Pointer for internal state.\n\n @note The strtok_r() function is not a standard library function.\n We provide our own for portability."]
    pub fn aim_strtok_r(
        str_: *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
        saveptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Predictable, C99-compliant version of snprintf()\n @param str The buffer\n @param size The size\n @param fmt The format\n\n @note Implemented because we rely on the C99 behavior wrt character counts\n and not all platforms implement it."]
    pub fn aim_snprintf(
        str_: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Predicatable, C99-compliant version of vsnprintf()\n @param str The buffer\n @param size The size\n @param fmt The format\n @param vargs The arguments\n\n @note Implemented because we rely on the C99 behavior wrt character counts\n and not all platforms implement it."]
    pub fn aim_vsnprintf(
        str_: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Duplicate a string with formatting.\n @param fmt The format"]
    pub fn aim_fstrdup(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Duplicate a string with formatting.\n @param fmt The format.\n @param vargs The args."]
    pub fn aim_vfstrdup(
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Duplicate a string with AIM datatype formatting.\n @param fmt The format"]
    pub fn aim_dfstrdup(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Duplicate a string with AIM datatype formatting.\n @param fmt The format.\n @param vargs The args."]
    pub fn aim_vdfstrdup(
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Portable strlcpy\n @param dst Destination\n @param src Source\n @param size Size"]
    pub fn aim_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Format a byte buffer as a printable string.\n @param data Data buffer.\n @param size size of the data.\n @param columns Number of output columns.\n @note You must free the result when finished."]
    pub fn aim_bytes_to_string(
        data: *mut u8,
        size: ::std::os::raw::c_int,
        columns: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Interpret a string as a byte buffer.\n @param src Source string.\n @param [out] size Receives the size of the returned buffer.\n @note You must free the result when finished."]
    pub fn aim_bytes_from_string(
        src: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    #[doc = " @brief Join strings.\n @param string The join string.\n @param strings The strings to join.\n @param count The number of strings.\n @note You must free the returned buffer."]
    pub fn aim_strjoin(
        string: *const ::std::os::raw::c_char,
        strings: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[doc = " Tokenizer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_tokens_s {
    #[doc = " total token count"]
    pub count: ::std::os::raw::c_int,
    #[doc = " tokens"]
    pub tokens: *mut *const ::std::os::raw::c_char,
    #[doc = " Internal"]
    pub _string: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_tokens_s"][::std::mem::size_of::<aim_tokens_s>() - 24usize];
    ["Alignment of aim_tokens_s"][::std::mem::align_of::<aim_tokens_s>() - 8usize];
    ["Offset of field: aim_tokens_s::count"][::std::mem::offset_of!(aim_tokens_s, count) - 0usize];
    ["Offset of field: aim_tokens_s::tokens"]
        [::std::mem::offset_of!(aim_tokens_s, tokens) - 8usize];
    ["Offset of field: aim_tokens_s::_string"]
        [::std::mem::offset_of!(aim_tokens_s, _string) - 16usize];
};
#[doc = " Tokenizer"]
pub type aim_tokens_t = aim_tokens_s;
extern "C" {
    #[doc = " @brief Split a string.\n @param string The input string.\n @param delim The token delimiters.\n @note Call aim_tokens_free() when done."]
    pub fn aim_strsplit(
        string: *const ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
    ) -> *mut aim_tokens_t;
}
extern "C" {
    #[doc = " @brief Free an AIM tokens structure.\n @param tokens The structure to free."]
    pub fn aim_tokens_free(tokens: *mut aim_tokens_t);
}
extern "C" {
    #[doc = " @brief Convert the source string to printable characters only.\n @param src The source string.\n @param replacement The replacement character for unprintable characters.\n @returns A copy of the source string with printable characters replaced by the given character.\n @note You must free the returned buffer."]
    pub fn aim_pstrdup(
        src: *const ::std::os::raw::c_char,
        replacement: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Return current running-under-valgrind status.\n @returns 0 If not running under valgrind.\n @returns 1 If running under valgrind.\n @returns -1 If status is unknown (support not compiled in)."]
    pub fn aim_valgrind_status() -> ::std::os::raw::c_int;
}
pub type max_align_t = f64;
#[doc = " Link structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_links {
    #[doc = " Previous"]
    pub prev: *mut list_links,
    #[doc = " Next"]
    pub next: *mut list_links,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_links"][::std::mem::size_of::<list_links>() - 16usize];
    ["Alignment of list_links"][::std::mem::align_of::<list_links>() - 8usize];
    ["Offset of field: list_links::prev"][::std::mem::offset_of!(list_links, prev) - 0usize];
    ["Offset of field: list_links::next"][::std::mem::offset_of!(list_links, next) - 8usize];
};
#[doc = " Link structure."]
pub type list_links_t = list_links;
#[doc = " List head."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    #[doc = " Links"]
    pub links: list_links,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_head"][::std::mem::size_of::<list_head>() - 16usize];
    ["Alignment of list_head"][::std::mem::align_of::<list_head>() - 8usize];
    ["Offset of field: list_head::links"][::std::mem::offset_of!(list_head, links) - 0usize];
};
#[doc = " List head."]
pub type list_head_t = list_head;
#[doc = " Context passed to all datatype handlers."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_datatype_context_s {
    #[doc = " The registrant's datatype structure."]
    pub dt: *mut aim_datatype_s,
    #[doc = " PVS for error messages if appropate."]
    pub epvs: *mut aim_pvs_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_datatype_context_s"][::std::mem::size_of::<aim_datatype_context_s>() - 16usize];
    ["Alignment of aim_datatype_context_s"]
        [::std::mem::align_of::<aim_datatype_context_s>() - 8usize];
    ["Offset of field: aim_datatype_context_s::dt"]
        [::std::mem::offset_of!(aim_datatype_context_s, dt) - 0usize];
    ["Offset of field: aim_datatype_context_s::epvs"]
        [::std::mem::offset_of!(aim_datatype_context_s, epvs) - 8usize];
};
#[doc = " Context passed to all datatype handlers."]
pub type aim_datatype_context_t = aim_datatype_context_s;
#[doc = "//**\n\n The \"from_string\" prototype.\n"]
pub type aim_datatype_from_str_f = ::std::option::Option<
    unsafe extern "C" fn(
        dtc: *mut aim_datatype_context_t,
        arg: *const ::std::os::raw::c_char,
        vargs: *mut aim_va_list_t,
    ) -> ::std::os::raw::c_int,
>;
#[doc = "//**\n\n The \"to_string\" prototype.\n"]
pub type aim_datatype_to_str_f = ::std::option::Option<
    unsafe extern "C" fn(
        dtc: *mut aim_datatype_context_t,
        vargs: *mut aim_va_list_t,
        rv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @brief Register a custom datatype.\n @param c Optional single character that refers to this datatype.\n @param type The full name of this datatype.\n @param desc The description of this datatype.\n @param froms The handler that converts a string to this datatype.\n @param tos The handler that converts this datatype to a string.\n @param cookie Client cookie to be passed to the handlers when called."]
    pub fn aim_datatype_register(
        c: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        froms: aim_datatype_from_str_f,
        tos: aim_datatype_to_str_f,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Unregister the given datatype.\n @param c Optional single character that refers to this datatype.\n @param type The full name of the datatype to unregister."]
    pub fn aim_datatype_unregister(
        c: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Initialize the datatypes infrastructure."]
    pub fn aim_datatypes_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Deinitialize the datatypes infrastructure."]
    pub fn aim_datatypes_denit();
}
#[doc = " The builtin {map} datatype provides conversion between strings\n and integers.\n\n This structure defines the input data for the {map} datatype."]
pub type aim_datatype_map_t = aim_map_si_t;
extern "C" {
    #[doc = " @brief Register a mapping datatype.\n @param c The optional single character that refers to this datatype.\n @param type The full name for this datatype.\n @param desc The description of this datatype.\n @param map The map table defining the allowable values for this datatype."]
    pub fn aim_datatype_register_map(
        c: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        map: *mut aim_datatype_map_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Register a flag mapping datatype.\n @param c The optional single character that refers to this datatype.\n @param type The full name for this datatype.\n @param desc The description of this datatype.\n @param map The map table defining the allowable values for this datatype.\n\n This assumes the input is a uint32_t representing flags defined\n in the map table."]
    pub fn aim_datatype_register_fmap(
        c: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        map: *mut aim_datatype_map_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Datatype forward."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_datatype_s {
    #[doc = " Internal list management"]
    pub links: list_links_t,
    #[doc = " character shortcut"]
    pub c: ::std::os::raw::c_char,
    #[doc = " typename, used with \"{type}\""]
    pub type_: *const ::std::os::raw::c_char,
    #[doc = " Human description of this type"]
    pub desc: *const ::std::os::raw::c_char,
    #[doc = " from-string handler for this datatype."]
    pub from_str: aim_datatype_from_str_f,
    #[doc = " to-string handler for this datatype."]
    pub to_str: aim_datatype_to_str_f,
    #[doc = " private cookie"]
    pub cookie: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_datatype_s"][::std::mem::size_of::<aim_datatype_s>() - 64usize];
    ["Alignment of aim_datatype_s"][::std::mem::align_of::<aim_datatype_s>() - 8usize];
    ["Offset of field: aim_datatype_s::links"]
        [::std::mem::offset_of!(aim_datatype_s, links) - 0usize];
    ["Offset of field: aim_datatype_s::c"][::std::mem::offset_of!(aim_datatype_s, c) - 16usize];
    ["Offset of field: aim_datatype_s::type_"]
        [::std::mem::offset_of!(aim_datatype_s, type_) - 24usize];
    ["Offset of field: aim_datatype_s::desc"]
        [::std::mem::offset_of!(aim_datatype_s, desc) - 32usize];
    ["Offset of field: aim_datatype_s::from_str"]
        [::std::mem::offset_of!(aim_datatype_s, from_str) - 40usize];
    ["Offset of field: aim_datatype_s::to_str"]
        [::std::mem::offset_of!(aim_datatype_s, to_str) - 48usize];
    ["Offset of field: aim_datatype_s::cookie"]
        [::std::mem::offset_of!(aim_datatype_s, cookie) - 56usize];
};
#[doc = "//**\n\n The format handlers for argument parsing and output are all invoked\n automatically during aim_argparse() and aim_printf().\n\n If you want to access them directly, they are defined and managed\n through this structure definition.\n"]
pub type aim_datatype_t = aim_datatype_s;
extern "C" {
    #[doc = " @brief Register a datatype using the native datatype structure.\n @param dt Pointer to the datatype structure."]
    pub fn aim_datatype_register_struct(dt: *mut aim_datatype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Find the datatype management structure for the requested type.\n @param c Optional shortcut character for the datatype.\n @param type The full name of the datatype.\n\n @returns NULL if there is no datatype registered by that name.\n @returns The pointer to the datatype information structure if found.\n"]
    pub fn aim_datatype_find(
        c: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> *mut aim_datatype_t;
}
extern "C" {
    #[doc = " @brief printf-style output to any PVS with custom datatype formatting.\n @param pvs The PVS output stream.\n @param fmt The format string."]
    pub fn aim_printf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief vprintf-style output to any PVS with custom datatype formatting.\n @param pvs The PVS output stream.\n @param fmt The format string.\n @param vargs The format arguments.\n @note This does not include custom datatype processing.\n @note Most clients should call aim_vprintf() instead."]
    pub fn aim_vprintf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief vprintf-style output to any PVS with custom datatype formatting.\n @param pvs The PVS output stream.\n @param fmt The format string.\n @param vargs The AIM variable argument structure.\n @note This does not include custom datatype processing.\n @note Most clients should call aim_avprintf() instead."]
    pub fn aim_avprintf(
        pvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: *mut aim_va_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Parse the given datatypes.\n @param args The arguments containing the string representations of the\n the given types.\n @param epvs Output PVS for parsing error messages, if relevent.\n @param fmt The datatype format specifiers."]
    pub fn aim_sparse(
        args: *mut *mut ::std::os::raw::c_char,
        epvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Parse the given datatypes (vararg version).\n @param args The arguments contaiining the string representations fo the\n given types.\n @param epvs Output PVS for parsing error messages, if relevent.\n @param fmt The datatype format specifiers.\n @param vargs The datatype arguments."]
    pub fn aim_vsparse(
        args: *mut *mut ::std::os::raw::c_char,
        epvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Parse the given datatypes (AIM vararg version).\n @param args The arguments contaiining the string representations fo the\n given types.\n @param epvs Output PVS for parsing error messages, if relevent.\n @param fmt The datatype format specifiers.\n @param vargs The datatype arguments."]
    pub fn aim_avsparse(
        args: *mut *mut ::std::os::raw::c_char,
        epvs: *mut aim_pvs_t,
        fmt: *const ::std::os::raw::c_char,
        vargs: *mut aim_va_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Parse the given string as the given datatype.\n @param arg Input string.\n @param epvs Output PVS for error messages, if relevent.\n @param c The datatype character shortcut, if relevent.\n @param type The datatype namne, if relevent.\n @param vargs The datatype argument(s)."]
    pub fn aim_avsparse_type(
        arg: *const ::std::os::raw::c_char,
        epvs: *mut aim_pvs_t,
        c: ::std::os::raw::c_char,
        type_: *mut ::std::os::raw::c_char,
        vargs: *mut aim_va_list_t,
    ) -> ::std::os::raw::c_int;
}
pub const aim_error_e_AIM_ERROR_NONE: aim_error_e = 0;
pub const aim_error_e_AIM_ERROR_PARAM: aim_error_e = -1;
pub const aim_error_e_AIM_ERROR_NOT_FOUND: aim_error_e = -2;
pub const aim_error_e_AIM_ERROR_INTERNAL: aim_error_e = -3;
#[doc = " aim_error"]
pub type aim_error_e = ::std::os::raw::c_int;
#[doc = " aim_error"]
pub use self::aim_error_e as aim_error_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn aim_error_name(e: aim_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn aim_error_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut aim_error_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn aim_error_desc(e: aim_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn aim_error_valid(e: aim_error_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " aim_error_map table."]
    pub static mut aim_error_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " aim_error_desc_map table."]
    pub static mut aim_error_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " @brief Report an unrecoverable error.\n @param fmt Message format.\n @note The behavior of this function is platform\n specific, but should always be considered a termination event.\n"]
    pub fn aim_die(
        function: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
#[doc = " atomic bitmap storage type."]
pub type aim_bitmap_word_t = u32;
#[doc = " All bitmaps must contain this structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap_hdr_s {
    #[doc = " The number of words in this bitmap"]
    pub wordcount: ::std::os::raw::c_int,
    #[doc = " bitmap words"]
    pub words: *mut aim_bitmap_word_t,
    #[doc = " Maximum allowable bit"]
    pub maxbit: ::std::os::raw::c_int,
    #[doc = " Indicates AIM allocated this bitmap structure"]
    pub allocated: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap_hdr_s"][::std::mem::size_of::<aim_bitmap_hdr_s>() - 24usize];
    ["Alignment of aim_bitmap_hdr_s"][::std::mem::align_of::<aim_bitmap_hdr_s>() - 8usize];
    ["Offset of field: aim_bitmap_hdr_s::wordcount"]
        [::std::mem::offset_of!(aim_bitmap_hdr_s, wordcount) - 0usize];
    ["Offset of field: aim_bitmap_hdr_s::words"]
        [::std::mem::offset_of!(aim_bitmap_hdr_s, words) - 8usize];
    ["Offset of field: aim_bitmap_hdr_s::maxbit"]
        [::std::mem::offset_of!(aim_bitmap_hdr_s, maxbit) - 16usize];
    ["Offset of field: aim_bitmap_hdr_s::allocated"]
        [::std::mem::offset_of!(aim_bitmap_hdr_s, allocated) - 20usize];
};
#[doc = " All bitmaps must contain this structure"]
pub type aim_bitmap_hdr_t = aim_bitmap_hdr_s;
#[doc = " A dynamically allocated bitmap."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap_t {
    #[doc = " bitmap hdr"]
    pub hdr: aim_bitmap_hdr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap_t"][::std::mem::size_of::<aim_bitmap_t>() - 24usize];
    ["Alignment of aim_bitmap_t"][::std::mem::align_of::<aim_bitmap_t>() - 8usize];
    ["Offset of field: aim_bitmap_t::hdr"][::std::mem::offset_of!(aim_bitmap_t, hdr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap32_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap32_s"][::std::mem::size_of::<aim_bitmap32_s>() - 32usize];
    ["Alignment of aim_bitmap32_s"][::std::mem::align_of::<aim_bitmap32_s>() - 8usize];
    ["Offset of field: aim_bitmap32_s::hdr"][::std::mem::offset_of!(aim_bitmap32_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap32_s::words"]
        [::std::mem::offset_of!(aim_bitmap32_s, words) - 24usize];
};
pub type aim_bitmap32_t = aim_bitmap32_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap64_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap64_s"][::std::mem::size_of::<aim_bitmap64_s>() - 32usize];
    ["Alignment of aim_bitmap64_s"][::std::mem::align_of::<aim_bitmap64_s>() - 8usize];
    ["Offset of field: aim_bitmap64_s::hdr"][::std::mem::offset_of!(aim_bitmap64_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap64_s::words"]
        [::std::mem::offset_of!(aim_bitmap64_s, words) - 24usize];
};
pub type aim_bitmap64_t = aim_bitmap64_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap96_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap96_s"][::std::mem::size_of::<aim_bitmap96_s>() - 40usize];
    ["Alignment of aim_bitmap96_s"][::std::mem::align_of::<aim_bitmap96_s>() - 8usize];
    ["Offset of field: aim_bitmap96_s::hdr"][::std::mem::offset_of!(aim_bitmap96_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap96_s::words"]
        [::std::mem::offset_of!(aim_bitmap96_s, words) - 24usize];
};
pub type aim_bitmap96_t = aim_bitmap96_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap128_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap128_s"][::std::mem::size_of::<aim_bitmap128_s>() - 40usize];
    ["Alignment of aim_bitmap128_s"][::std::mem::align_of::<aim_bitmap128_s>() - 8usize];
    ["Offset of field: aim_bitmap128_s::hdr"]
        [::std::mem::offset_of!(aim_bitmap128_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap128_s::words"]
        [::std::mem::offset_of!(aim_bitmap128_s, words) - 24usize];
};
pub type aim_bitmap128_t = aim_bitmap128_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap256_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap256_s"][::std::mem::size_of::<aim_bitmap256_s>() - 56usize];
    ["Alignment of aim_bitmap256_s"][::std::mem::align_of::<aim_bitmap256_s>() - 8usize];
    ["Offset of field: aim_bitmap256_s::hdr"]
        [::std::mem::offset_of!(aim_bitmap256_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap256_s::words"]
        [::std::mem::offset_of!(aim_bitmap256_s, words) - 24usize];
};
pub type aim_bitmap256_t = aim_bitmap256_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap512_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap512_s"][::std::mem::size_of::<aim_bitmap512_s>() - 88usize];
    ["Alignment of aim_bitmap512_s"][::std::mem::align_of::<aim_bitmap512_s>() - 8usize];
    ["Offset of field: aim_bitmap512_s::hdr"]
        [::std::mem::offset_of!(aim_bitmap512_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap512_s::words"]
        [::std::mem::offset_of!(aim_bitmap512_s, words) - 24usize];
};
pub type aim_bitmap512_t = aim_bitmap512_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_bitmap4096_s {
    pub hdr: aim_bitmap_hdr_t,
    pub words: [aim_bitmap_word_t; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_bitmap4096_s"][::std::mem::size_of::<aim_bitmap4096_s>() - 536usize];
    ["Alignment of aim_bitmap4096_s"][::std::mem::align_of::<aim_bitmap4096_s>() - 8usize];
    ["Offset of field: aim_bitmap4096_s::hdr"]
        [::std::mem::offset_of!(aim_bitmap4096_s, hdr) - 0usize];
    ["Offset of field: aim_bitmap4096_s::words"]
        [::std::mem::offset_of!(aim_bitmap4096_s, words) - 24usize];
};
pub type aim_bitmap4096_t = aim_bitmap4096_s;
extern "C" {
    #[doc = " @brief Allocate a dynamic bitmap structure.\n @param [out] rv Receives the new bitmap structure.\n If rv is NULL, a new structure will be allocated.\n @param bitcount The number of bits required.\n @returns A pointer to the new bitmap structure."]
    pub fn aim_bitmap_alloc(
        rv: *mut aim_bitmap_t,
        bitcount: ::std::os::raw::c_int,
    ) -> *mut aim_bitmap_t;
}
extern "C" {
    #[doc = " @brief Free a bitmap structure.\n @param bmap The bitmap structure to free."]
    pub fn aim_bitmap_free(bmap: *mut aim_bitmap_t);
}
extern "C" {
    #[doc = " @brief Allocate memory.\n @param size Size.\n\n The returned memory is uninitialized.\n Aborts if allocation fails."]
    pub fn aim_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Zero'ed memory alloc.\n @param size Size.\n\n Aborts if allocation fails."]
    pub fn aim_zmalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Resize memory.\n @param ptr Allocated memory.\n @param size New size.\n\n Usual realloc semantics: if ptr is NULL then a new allocation is made, and\n is size is zero then the memory is freed. Otherwise the memory is resized\n and possibly moved.\n\n Aborts if allocation fails."]
    pub fn aim_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Free memory allocated by aim_zmalloc()\n @param data The memory to free."]
    pub fn aim_free(data: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " @brief Duplicate memory.\n @param src Source memory.\n @param size Size.\n @returns a new copy of the data.\n\n Aborts if allocation fails."]
    pub fn aim_memdup(src: *mut ::std::os::raw::c_void, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Duplicate memory.\n @param src Source memory;\n @param src_size Size to copy.\n @param alloc_size Size to allocate.\n\n Aborts if allocation fails."]
    pub fn aim_memndup(
        src: *mut ::std::os::raw::c_void,
        src_size: usize,
        alloc_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_TO_DBGLOG: aim_log_handler_option_e = 0;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_TO_SYSLOG: aim_log_handler_option_e = 1;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_TO_STDOUT: aim_log_handler_option_e = 2;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_TO_STDERR: aim_log_handler_option_e = 3;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_LAST: aim_log_handler_option_e = 3;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_COUNT: aim_log_handler_option_e = 4;
pub const aim_log_handler_option_e_AIM_LOG_HANDLER_OPTION_INVALID: aim_log_handler_option_e = -1;
#[doc = " aim_log_handler_option"]
pub type aim_log_handler_option_e = ::std::os::raw::c_int;
#[doc = " aim_log_handler_option"]
pub use self::aim_log_handler_option_e as aim_log_handler_option_t;
pub const aim_log_handler_flag_e_AIM_LOG_HANDLER_FLAG_TO_DBGLOG: aim_log_handler_flag_e = 1;
pub const aim_log_handler_flag_e_AIM_LOG_HANDLER_FLAG_TO_SYSLOG: aim_log_handler_flag_e = 2;
pub const aim_log_handler_flag_e_AIM_LOG_HANDLER_FLAG_TO_STDOUT: aim_log_handler_flag_e = 4;
pub const aim_log_handler_flag_e_AIM_LOG_HANDLER_FLAG_TO_STDERR: aim_log_handler_flag_e = 8;
#[doc = " aim_log_handler_flag"]
pub type aim_log_handler_flag_e = ::std::os::raw::c_uint;
#[doc = " aim_log_handler_flag"]
pub use self::aim_log_handler_flag_e as aim_log_handler_flag_t;
#[doc = " Configuration block."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_log_handler_config_s {
    #[doc = " Flags: see AIM_LOG_HANDLER_FLAG_* above"]
    pub flags: u32,
    #[doc = " Name of debug log file, optionally with full or relative path"]
    pub debug_log_name: *mut ::std::os::raw::c_char,
    #[doc = " Name of rotate log file, optionally with full or relative path"]
    pub rotate_log_name: *mut ::std::os::raw::c_char,
    #[doc = " Maximum number of bytes beyond which the debug log will be rotated"]
    pub max_debug_log_size: u32,
    #[doc = " Maximum number of rotated debug logs, excluding the actual debug log"]
    pub max_debug_logs: u32,
    #[doc = " Syslog facility to use (if applicable)"]
    pub syslog_facility: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of aim_log_handler_config_s"]
        [::std::mem::size_of::<aim_log_handler_config_s>() - 40usize];
    ["Alignment of aim_log_handler_config_s"]
        [::std::mem::align_of::<aim_log_handler_config_s>() - 8usize];
    ["Offset of field: aim_log_handler_config_s::flags"]
        [::std::mem::offset_of!(aim_log_handler_config_s, flags) - 0usize];
    ["Offset of field: aim_log_handler_config_s::debug_log_name"]
        [::std::mem::offset_of!(aim_log_handler_config_s, debug_log_name) - 8usize];
    ["Offset of field: aim_log_handler_config_s::rotate_log_name"]
        [::std::mem::offset_of!(aim_log_handler_config_s, rotate_log_name) - 16usize];
    ["Offset of field: aim_log_handler_config_s::max_debug_log_size"]
        [::std::mem::offset_of!(aim_log_handler_config_s, max_debug_log_size) - 24usize];
    ["Offset of field: aim_log_handler_config_s::max_debug_logs"]
        [::std::mem::offset_of!(aim_log_handler_config_s, max_debug_logs) - 28usize];
    ["Offset of field: aim_log_handler_config_s::syslog_facility"]
        [::std::mem::offset_of!(aim_log_handler_config_s, syslog_facility) - 32usize];
};
#[doc = " Configuration block."]
pub type aim_log_handler_config_t = aim_log_handler_config_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aim_log_handler_s {
    _unused: [u8; 0],
}
pub type aim_log_handler_t = *mut aim_log_handler_s;
extern "C" {
    #[doc = " @brief Initialize the AIM log handler system."]
    pub fn aim_log_handler_init();
}
extern "C" {
    #[doc = " @brief Deinitialize the AIM log handler system."]
    pub fn aim_log_handler_denit();
}
extern "C" {
    pub fn aim_log_handler_basic_config_get(debug_logs: *mut u32, debug_file_size: *mut u32);
}
extern "C" {
    pub fn aim_log_handler_basic_config_set(debug_logs: u32, debug_file_size: u32);
}
extern "C" {
    #[doc = " Create an AIM log handler instance.\n @param config The handler configurtion.\n @returns Object pointer."]
    pub fn aim_log_handler_create(config: *mut aim_log_handler_config_t) -> aim_log_handler_t;
}
extern "C" {
    #[doc = " Destroy an AIM log handler instance."]
    pub fn aim_log_handler_destroy(handler: aim_log_handler_t);
}
extern "C" {
    #[doc = " @brief AIM log handler callback.\n @param Cookie log handler cookie. Must be an aim_log_handler_t.\n @param flag The AIM log flag.\n @param str The log message."]
    pub fn aim_log_handler_logf(
        cookie: *mut ::std::os::raw::c_void,
        flag: aim_log_flag_t,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " @brief Basic initialization for console and daemonized clients.\n @param ident The syslog ident to use (optional)\n @param debug_log_file  The name of the debug log file (optional)\n @param rotate_log_file  The name of the rotate log file (optional)\n @param max_debug_size   Maximum debug log size.\n @param max_debug_count  Maximum number of rotated debug logs.\n\n @note This is designed to be a simple and generic initialization\n for both daemonized and console-based clients."]
    pub fn aim_log_handler_basic_init_all(
        ident: *const ::std::os::raw::c_char,
        debug_log_file: *const ::std::os::raw::c_char,
        rotate_log_file: *const ::std::os::raw::c_char,
        max_debug_log_size: ::std::os::raw::c_int,
        max_debug_logs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Deinitialize basic log handling support."]
    pub fn aim_log_handler_basic_denit_all();
}
extern "C" {
    #[doc = " Enum names."]
    pub fn aim_log_handler_flag_name(e: aim_log_handler_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn aim_log_handler_flag_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut aim_log_handler_flag_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn aim_log_handler_flag_desc(e: aim_log_handler_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn aim_log_handler_flag_valid(e: aim_log_handler_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " aim_log_handler_flag_map table."]
    pub static mut aim_log_handler_flag_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " aim_log_handler_flag_desc_map table."]
    pub static mut aim_log_handler_flag_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn aim_log_handler_option_name(
        e: aim_log_handler_option_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn aim_log_handler_option_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut aim_log_handler_option_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn aim_log_handler_option_desc(
        e: aim_log_handler_option_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " aim_log_handler_option_map table."]
    pub static mut aim_log_handler_option_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " aim_log_handler_option_desc_map table."]
    pub static mut aim_log_handler_option_desc_map: [aim_map_si_t; 0usize];
}
#[doc = " Configuration settings structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_config_settings_s {
    #[doc = " name"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " value"]
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_config_settings_s"][::std::mem::size_of::<onlp_config_settings_s>() - 16usize];
    ["Alignment of onlp_config_settings_s"]
        [::std::mem::align_of::<onlp_config_settings_s>() - 8usize];
    ["Offset of field: onlp_config_settings_s::name"]
        [::std::mem::offset_of!(onlp_config_settings_s, name) - 0usize];
    ["Offset of field: onlp_config_settings_s::value"]
        [::std::mem::offset_of!(onlp_config_settings_s, value) - 8usize];
};
#[doc = " Configuration settings structure."]
pub type onlp_config_settings_t = onlp_config_settings_s;
extern "C" {
    #[doc = " Configuration settings table. */\n/** onlp_config_settings table."]
    pub static mut onlp_config_settings: [onlp_config_settings_t; 0usize];
}
extern "C" {
    #[doc = " @brief Lookup a configuration setting.\n @param setting The name of the configuration option to lookup."]
    pub fn onlp_config_lookup(
        setting: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Show the compile-time configuration.\n @param pvs The output stream."]
    pub fn onlp_config_show(pvs: *mut aim_pvs_s) -> ::std::os::raw::c_int;
}
pub const onlp_status_e_ONLP_STATUS_OK: onlp_status_e = 0;
pub const onlp_status_e_ONLP_STATUS_E_GENERIC: onlp_status_e = -1;
pub const onlp_status_e_ONLP_STATUS_E_UNSUPPORTED: onlp_status_e = -10;
pub const onlp_status_e_ONLP_STATUS_E_MISSING: onlp_status_e = -11;
pub const onlp_status_e_ONLP_STATUS_E_INVALID: onlp_status_e = -12;
pub const onlp_status_e_ONLP_STATUS_E_INTERNAL: onlp_status_e = -13;
pub const onlp_status_e_ONLP_STATUS_E_PARAM: onlp_status_e = -14;
pub const onlp_status_e_ONLP_STATUS_E_I2C: onlp_status_e = -15;
#[doc = " onlp_status"]
pub type onlp_status_e = ::std::os::raw::c_int;
#[doc = " onlp_status"]
pub use self::onlp_status_e as onlp_status_t;
extern "C" {
    #[doc = " @brief Initialize all subsystems."]
    pub fn onlp_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onlp_denit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Dump the current platform data.\n @param pvs The output pvs"]
    pub fn onlp_platform_dump(pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    pub fn onlp_platform_show(pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_status_name(e: onlp_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_status_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_status_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_status_desc(e: onlp_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_status_valid(e: onlp_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_status_map table."]
    pub static mut onlp_status_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_status_desc_map table."]
    pub static mut onlp_status_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    pub fn IOF_ResetDevice(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_OutByte(Address: ::std::os::raw::c_uint, Data: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn IOF_OutWord(Address: ::std::os::raw::c_uint, Data: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn IOF_OutDword(Address: ::std::os::raw::c_uint, Data: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn IOF_InpByte(Address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn IOF_InpWord(Address: ::std::os::raw::c_uint) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_InpDword(Address: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetEcu(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_GetFlags(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetMemFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetMemFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetCntFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetCntFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDoFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetDoFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDiFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetDiFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetAoFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetAoFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetAiFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetAiFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetSigFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetSigFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetBmFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetBmFlag(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flag: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_SetEcuCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetEcuCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetEcuCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetEcuCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_ResetFlags(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Flags: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_ResetMem(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_GetMemStatus(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetMemCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetMemCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetMemCommandD2(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data1: ::std::os::raw::c_ulong,
        Data2: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetMemCommandD2(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data1: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetMemCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetMemCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_ResetAi(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_GetAiData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetAiStatus(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_OpenAiGate(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_CloseAiGate(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_SetAiCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetAiCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetAiCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetAiCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_SetAiEEPROM(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetAiEEPROM(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_ResetAo(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_SetAoData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetAoData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetAoStatus(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_OpenAoGate(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_CloseAoGate(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_SetAoCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetAoCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetAoCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetAoCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_SetAoEEPROM(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetAoEEPROM(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_GetCntStatus(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Channel: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetCntCommandD1(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetCntCommandD1(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetCntCommandD2(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data1: ::std::os::raw::c_ulong,
        Data2: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetCntCommandD2(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data1: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_ResetDi(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_GetDiData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetDiMask(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_SetDiCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDiCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetDiCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetDiCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn IOF_ResetDo(BoardNo: ::std::os::raw::c_ushort, Address: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IOF_SetDoData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        DoData: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDoData(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetDoMask(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Mask: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDoMask(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetDoCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        Data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn IOF_GetDoCommandD(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn IOF_SetDoCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
        DataHigh: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn IOF_GetDoCommandW(
        BoardNo: ::std::os::raw::c_ushort,
        Address: ::std::os::raw::c_uint,
        Command: ::std::os::raw::c_ulong,
        DataLow: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort;
}
#[doc = " The ONIE specification defines the format of the system\n eeprom and the available fields that may be described there.\n\n This structure contains the decoded fields for application\n and platform use."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_onie_info_s {
    pub product_name: *mut ::std::os::raw::c_char,
    pub part_number: *mut ::std::os::raw::c_char,
    pub serial_number: *mut ::std::os::raw::c_char,
    pub mac: [u8; 6usize],
    pub manufacture_date: *mut ::std::os::raw::c_char,
    pub device_version: u8,
    pub label_revision: *mut ::std::os::raw::c_char,
    pub platform_name: *mut ::std::os::raw::c_char,
    pub onie_version: *mut ::std::os::raw::c_char,
    pub mac_range: u16,
    pub manufacturer: *mut ::std::os::raw::c_char,
    pub country_code: *mut ::std::os::raw::c_char,
    pub vendor: *mut ::std::os::raw::c_char,
    pub diag_version: *mut ::std::os::raw::c_char,
    pub service_tag: *mut ::std::os::raw::c_char,
    pub crc: u32,
    #[doc = " Vendor Extensions list, if available."]
    pub vx_list: list_head_t,
    pub _hdr_id_string: *mut ::std::os::raw::c_char,
    pub _hdr_version: u8,
    pub _hdr_length: u8,
    pub _hdr_valid_crc: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_onie_info_s"][::std::mem::size_of::<onlp_onie_info_s>() - 160usize];
    ["Alignment of onlp_onie_info_s"][::std::mem::align_of::<onlp_onie_info_s>() - 8usize];
    ["Offset of field: onlp_onie_info_s::product_name"]
        [::std::mem::offset_of!(onlp_onie_info_s, product_name) - 0usize];
    ["Offset of field: onlp_onie_info_s::part_number"]
        [::std::mem::offset_of!(onlp_onie_info_s, part_number) - 8usize];
    ["Offset of field: onlp_onie_info_s::serial_number"]
        [::std::mem::offset_of!(onlp_onie_info_s, serial_number) - 16usize];
    ["Offset of field: onlp_onie_info_s::mac"]
        [::std::mem::offset_of!(onlp_onie_info_s, mac) - 24usize];
    ["Offset of field: onlp_onie_info_s::manufacture_date"]
        [::std::mem::offset_of!(onlp_onie_info_s, manufacture_date) - 32usize];
    ["Offset of field: onlp_onie_info_s::device_version"]
        [::std::mem::offset_of!(onlp_onie_info_s, device_version) - 40usize];
    ["Offset of field: onlp_onie_info_s::label_revision"]
        [::std::mem::offset_of!(onlp_onie_info_s, label_revision) - 48usize];
    ["Offset of field: onlp_onie_info_s::platform_name"]
        [::std::mem::offset_of!(onlp_onie_info_s, platform_name) - 56usize];
    ["Offset of field: onlp_onie_info_s::onie_version"]
        [::std::mem::offset_of!(onlp_onie_info_s, onie_version) - 64usize];
    ["Offset of field: onlp_onie_info_s::mac_range"]
        [::std::mem::offset_of!(onlp_onie_info_s, mac_range) - 72usize];
    ["Offset of field: onlp_onie_info_s::manufacturer"]
        [::std::mem::offset_of!(onlp_onie_info_s, manufacturer) - 80usize];
    ["Offset of field: onlp_onie_info_s::country_code"]
        [::std::mem::offset_of!(onlp_onie_info_s, country_code) - 88usize];
    ["Offset of field: onlp_onie_info_s::vendor"]
        [::std::mem::offset_of!(onlp_onie_info_s, vendor) - 96usize];
    ["Offset of field: onlp_onie_info_s::diag_version"]
        [::std::mem::offset_of!(onlp_onie_info_s, diag_version) - 104usize];
    ["Offset of field: onlp_onie_info_s::service_tag"]
        [::std::mem::offset_of!(onlp_onie_info_s, service_tag) - 112usize];
    ["Offset of field: onlp_onie_info_s::crc"]
        [::std::mem::offset_of!(onlp_onie_info_s, crc) - 120usize];
    ["Offset of field: onlp_onie_info_s::vx_list"]
        [::std::mem::offset_of!(onlp_onie_info_s, vx_list) - 128usize];
    ["Offset of field: onlp_onie_info_s::_hdr_id_string"]
        [::std::mem::offset_of!(onlp_onie_info_s, _hdr_id_string) - 144usize];
    ["Offset of field: onlp_onie_info_s::_hdr_version"]
        [::std::mem::offset_of!(onlp_onie_info_s, _hdr_version) - 152usize];
    ["Offset of field: onlp_onie_info_s::_hdr_length"]
        [::std::mem::offset_of!(onlp_onie_info_s, _hdr_length) - 153usize];
    ["Offset of field: onlp_onie_info_s::_hdr_valid_crc"]
        [::std::mem::offset_of!(onlp_onie_info_s, _hdr_valid_crc) - 154usize];
};
#[doc = " The ONIE specification defines the format of the system\n eeprom and the available fields that may be described there.\n\n This structure contains the decoded fields for application\n and platform use."]
pub type onlp_onie_info_t = onlp_onie_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_onie_vx_s {
    pub links: list_links_t,
    pub data: [u8; 256usize],
    pub size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_onie_vx_s"][::std::mem::size_of::<onlp_onie_vx_s>() - 280usize];
    ["Alignment of onlp_onie_vx_s"][::std::mem::align_of::<onlp_onie_vx_s>() - 8usize];
    ["Offset of field: onlp_onie_vx_s::links"]
        [::std::mem::offset_of!(onlp_onie_vx_s, links) - 0usize];
    ["Offset of field: onlp_onie_vx_s::data"]
        [::std::mem::offset_of!(onlp_onie_vx_s, data) - 16usize];
    ["Offset of field: onlp_onie_vx_s::size"]
        [::std::mem::offset_of!(onlp_onie_vx_s, size) - 272usize];
};
pub type onlp_onie_vx_t = onlp_onie_vx_s;
extern "C" {
    #[doc = " Support for parsing ONIE eeprom data into the\n ONIE information structure is provided for all platforms."]
    pub fn onlp_onie_decode(
        rv: *mut onlp_onie_info_t,
        data: *const u8,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onlp_onie_decode_file(
        rv: *mut onlp_onie_info_t,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free an ONIE info structure."]
    pub fn onlp_onie_info_free(info: *mut onlp_onie_info_t);
}
extern "C" {
    #[doc = " Show the contents of an ONIE info structure."]
    pub fn onlp_onie_show(info: *mut onlp_onie_info_t, pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " Dump the contents of an ONIE info structure as JSON"]
    pub fn onlp_onie_show_json(info: *mut onlp_onie_info_t, pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " Read ONIE fields from a JSON file."]
    pub fn onlp_onie_read_json(
        info: *mut onlp_onie_info_t,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Configuration settings structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlplib_config_settings_s {
    #[doc = " name"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " value"]
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlplib_config_settings_s"]
        [::std::mem::size_of::<onlplib_config_settings_s>() - 16usize];
    ["Alignment of onlplib_config_settings_s"]
        [::std::mem::align_of::<onlplib_config_settings_s>() - 8usize];
    ["Offset of field: onlplib_config_settings_s::name"]
        [::std::mem::offset_of!(onlplib_config_settings_s, name) - 0usize];
    ["Offset of field: onlplib_config_settings_s::value"]
        [::std::mem::offset_of!(onlplib_config_settings_s, value) - 8usize];
};
#[doc = " Configuration settings structure."]
pub type onlplib_config_settings_t = onlplib_config_settings_s;
extern "C" {
    #[doc = " Configuration settings table. */\n/** onlplib_config_settings table."]
    pub static mut onlplib_config_settings: [onlplib_config_settings_t; 0usize];
}
extern "C" {
    #[doc = " @brief Lookup a configuration setting.\n @param setting The name of the configuration option to lookup."]
    pub fn onlplib_config_lookup(
        setting: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Show the compile-time configuration.\n @param pvs The output stream."]
    pub fn onlplib_config_show(pvs: *mut aim_pvs_s) -> ::std::os::raw::c_int;
}
#[doc = " Platform Information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_platform_info_s {
    #[doc = " CPLD Versions\n\n Describes the internal CPLD version numbers, if applicable.\n"]
    pub cpld_versions: *mut ::std::os::raw::c_char,
    #[doc = " Additional version or platform information."]
    pub other_versions: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_platform_info_s"][::std::mem::size_of::<onlp_platform_info_s>() - 16usize];
    ["Alignment of onlp_platform_info_s"][::std::mem::align_of::<onlp_platform_info_s>() - 8usize];
    ["Offset of field: onlp_platform_info_s::cpld_versions"]
        [::std::mem::offset_of!(onlp_platform_info_s, cpld_versions) - 0usize];
    ["Offset of field: onlp_platform_info_s::other_versions"]
        [::std::mem::offset_of!(onlp_platform_info_s, other_versions) - 8usize];
};
#[doc = " Platform Information"]
pub type onlp_platform_info_t = onlp_platform_info_s;
extern "C" {
    pub fn onlp_platform_info_show_json(pi: *mut onlp_platform_info_t, pvs: *mut aim_pvs_t);
}
extern "C" {
    pub fn onlp_platform_info_show(pi: *mut onlp_platform_info_t, pvs: *mut aim_pvs_t);
}
#[doc = " System peripherals are identified by a 32bit OID.\n\n The First byte is the object-class identifier:\n    Thermal sensor object\n    Fan object\n    PSU object\n    LED object\n    MODULE object\n    etc..\n The remaining bytes are the object id."]
pub type onlp_oid_t = u32;
pub const onlp_oid_dump_e_ONLP_OID_DUMP_RECURSE: onlp_oid_dump_e = 1;
pub const onlp_oid_dump_e_ONLP_OID_DUMP_EVEN_IF_ABSENT: onlp_oid_dump_e = 2;
#[doc = " onlp_oid_dump"]
pub type onlp_oid_dump_e = ::std::os::raw::c_uint;
#[doc = " onlp_oid_dump"]
pub use self::onlp_oid_dump_e as onlp_oid_dump_t;
pub const onlp_oid_show_e_ONLP_OID_SHOW_RECURSE: onlp_oid_show_e = 1;
pub const onlp_oid_show_e_ONLP_OID_SHOW_EXTENDED: onlp_oid_show_e = 2;
pub const onlp_oid_show_e_ONLP_OID_SHOW_YAML: onlp_oid_show_e = 4;
#[doc = " onlp_oid_show"]
pub type onlp_oid_show_e = ::std::os::raw::c_uint;
#[doc = " onlp_oid_show"]
pub use self::onlp_oid_show_e as onlp_oid_show_t;
pub const onlp_oid_type_e_ONLP_OID_TYPE_SYS: onlp_oid_type_e = 1;
pub const onlp_oid_type_e_ONLP_OID_TYPE_THERMAL: onlp_oid_type_e = 2;
pub const onlp_oid_type_e_ONLP_OID_TYPE_FAN: onlp_oid_type_e = 3;
pub const onlp_oid_type_e_ONLP_OID_TYPE_PSU: onlp_oid_type_e = 4;
pub const onlp_oid_type_e_ONLP_OID_TYPE_LED: onlp_oid_type_e = 5;
pub const onlp_oid_type_e_ONLP_OID_TYPE_MODULE: onlp_oid_type_e = 6;
pub const onlp_oid_type_e_ONLP_OID_TYPE_RTC: onlp_oid_type_e = 7;
#[doc = " onlp_oid_type"]
pub type onlp_oid_type_e = ::std::os::raw::c_uint;
#[doc = " onlp_oid_type"]
pub use self::onlp_oid_type_e as onlp_oid_type_t;
pub type onlp_oid_desc_t = [::std::os::raw::c_char; 128usize];
pub type onlp_oid_table_t = [onlp_oid_t; 128usize];
#[doc = " All OID objects contain this header as the first member."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_oid_hdr_s {
    #[doc = " The OID"]
    pub id: onlp_oid_t,
    #[doc = " The description of this object."]
    pub description: onlp_oid_desc_t,
    #[doc = " The parent OID of this object."]
    pub poid: onlp_oid_t,
    #[doc = " The children of this OID"]
    pub coids: onlp_oid_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_oid_hdr_s"][::std::mem::size_of::<onlp_oid_hdr_s>() - 648usize];
    ["Alignment of onlp_oid_hdr_s"][::std::mem::align_of::<onlp_oid_hdr_s>() - 4usize];
    ["Offset of field: onlp_oid_hdr_s::id"][::std::mem::offset_of!(onlp_oid_hdr_s, id) - 0usize];
    ["Offset of field: onlp_oid_hdr_s::description"]
        [::std::mem::offset_of!(onlp_oid_hdr_s, description) - 4usize];
    ["Offset of field: onlp_oid_hdr_s::poid"]
        [::std::mem::offset_of!(onlp_oid_hdr_s, poid) - 132usize];
    ["Offset of field: onlp_oid_hdr_s::coids"]
        [::std::mem::offset_of!(onlp_oid_hdr_s, coids) - 136usize];
};
#[doc = " All OID objects contain this header as the first member."]
pub type onlp_oid_hdr_t = onlp_oid_hdr_s;
extern "C" {
    pub fn onlp_oid_dump(oid: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    pub fn onlp_oid_table_dump(table: *mut onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    pub fn onlp_oid_show(oid: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    pub fn onlp_oid_table_show(table: *mut onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
#[doc = " Iterator"]
pub type onlp_oid_iterate_f = ::std::option::Option<
    unsafe extern "C" fn(
        oid: onlp_oid_t,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @brief Iterate over all platform OIDs.\n @param oid The root OID.\n @param type The OID type filter (optional)\n @param itf The iterator function.\n @param cookie The cookie."]
    pub fn onlp_oid_iterate(
        oid: onlp_oid_t,
        type_: onlp_oid_type_t,
        itf: onlp_oid_iterate_f,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the OID header for a given OID.\n @param oid The oid\n @param hdr [out] Receives the header"]
    pub fn onlp_oid_hdr_get(oid: onlp_oid_t, hdr: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_oid_dump_name(e: onlp_oid_dump_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_oid_dump_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_oid_dump_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_oid_dump_desc(e: onlp_oid_dump_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_oid_dump_valid(e: onlp_oid_dump_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_oid_dump_map table."]
    pub static mut onlp_oid_dump_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_oid_dump_desc_map table."]
    pub static mut onlp_oid_dump_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_oid_show_name(e: onlp_oid_show_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_oid_show_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_oid_show_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_oid_show_desc(e: onlp_oid_show_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_oid_show_valid(e: onlp_oid_show_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_oid_show_map table."]
    pub static mut onlp_oid_show_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_oid_show_desc_map table."]
    pub static mut onlp_oid_show_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_oid_type_name(e: onlp_oid_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_oid_type_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_oid_type_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_oid_type_desc(e: onlp_oid_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_oid_type_valid(e: onlp_oid_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_oid_type_map table."]
    pub static mut onlp_oid_type_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_oid_type_desc_map table."]
    pub static mut onlp_oid_type_desc_map: [aim_map_si_t; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_sys_info_s {
    #[doc = " OID Header"]
    pub hdr: onlp_oid_hdr_t,
    pub onie_info: onlp_onie_info_t,
    pub platform_info: onlp_platform_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_sys_info_s"][::std::mem::size_of::<onlp_sys_info_s>() - 824usize];
    ["Alignment of onlp_sys_info_s"][::std::mem::align_of::<onlp_sys_info_s>() - 8usize];
    ["Offset of field: onlp_sys_info_s::hdr"]
        [::std::mem::offset_of!(onlp_sys_info_s, hdr) - 0usize];
    ["Offset of field: onlp_sys_info_s::onie_info"]
        [::std::mem::offset_of!(onlp_sys_info_s, onie_info) - 648usize];
    ["Offset of field: onlp_sys_info_s::platform_info"]
        [::std::mem::offset_of!(onlp_sys_info_s, platform_info) - 808usize];
};
pub type onlp_sys_info_t = onlp_sys_info_s;
extern "C" {
    #[doc = " @brief Initialize the System API"]
    pub fn onlp_sys_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the system information structure.\n @param rv [out] Receives the system information."]
    pub fn onlp_sys_info_get(rv: *mut onlp_sys_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Free a system information structure."]
    pub fn onlp_sys_info_free(info: *mut onlp_sys_info_t);
}
extern "C" {
    #[doc = " @brief Get the system header."]
    pub fn onlp_sys_hdr_get(hdr: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief SYS OID debug dump.\n @param id The SYS OID.\n @param pvs The output pvs.\n @param flags The output flags.\n @note This output is designed for debugging."]
    pub fn onlp_sys_dump(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief Show the status of the given OID.\n @param id the SYS OID.\n @param pvs The output pvs.\n @param flags The output flags"]
    pub fn onlp_sys_show(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief SYS Ioctl\n @param code The ioctl code.\n @param ... Arguments"]
    pub fn onlp_sys_ioctl(code: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief SYS Ioctl\n @param code The ioctl code.\n @param vargs arguments."]
    pub fn onlp_sys_vioctl(code: ::std::os::raw::c_int, vargs: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Start the platform management thread."]
    pub fn onlp_sys_platform_manage_start(block: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Stop the platform management thread."]
    pub fn onlp_sys_platform_manage_stop(block: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Join the platform management thread."]
    pub fn onlp_sys_platform_manage_join() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Perform any pending platform management activities.\n @note  A call to this function will perform any pending\n platform management activities. It is not intended to block\n for an extended period of time."]
    pub fn onlp_sys_platform_manage_now();
}
extern "C" {
    pub fn onlp_sys_debug(
        pvs: *mut aim_pvs_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Configuration settings structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sff_config_settings_s {
    #[doc = " name"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " value"]
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sff_config_settings_s"][::std::mem::size_of::<sff_config_settings_s>() - 16usize];
    ["Alignment of sff_config_settings_s"]
        [::std::mem::align_of::<sff_config_settings_s>() - 8usize];
    ["Offset of field: sff_config_settings_s::name"]
        [::std::mem::offset_of!(sff_config_settings_s, name) - 0usize];
    ["Offset of field: sff_config_settings_s::value"]
        [::std::mem::offset_of!(sff_config_settings_s, value) - 8usize];
};
#[doc = " Configuration settings structure."]
pub type sff_config_settings_t = sff_config_settings_s;
extern "C" {
    #[doc = " Configuration settings table. */\n/** sff_config_settings table."]
    pub static mut sff_config_settings: [sff_config_settings_t; 0usize];
}
extern "C" {
    #[doc = " @brief Lookup a configuration setting.\n @param setting The name of the configuration option to lookup."]
    pub fn sff_config_lookup(
        setting: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Show the compile-time configuration.\n @param pvs The output stream."]
    pub fn sff_config_show(pvs: *mut aim_pvs_s) -> ::std::os::raw::c_int;
}
pub const sff_media_type_e_SFF_MEDIA_TYPE_COPPER: sff_media_type_e = 0;
pub const sff_media_type_e_SFF_MEDIA_TYPE_FIBER: sff_media_type_e = 1;
pub const sff_media_type_e_SFF_MEDIA_TYPE_LAST: sff_media_type_e = 1;
pub const sff_media_type_e_SFF_MEDIA_TYPE_COUNT: sff_media_type_e = 2;
pub const sff_media_type_e_SFF_MEDIA_TYPE_INVALID: sff_media_type_e = -1;
#[doc = " sff_media_type"]
pub type sff_media_type_e = ::std::os::raw::c_int;
#[doc = " sff_media_type"]
pub use self::sff_media_type_e as sff_media_type_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn sff_media_type_name(e: sff_media_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn sff_media_type_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut sff_media_type_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn sff_media_type_desc(e: sff_media_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " sff_media_type_map table."]
    pub static mut sff_media_type_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " sff_media_type_desc_map table."]
    pub static mut sff_media_type_desc_map: [aim_map_si_t; 0usize];
}
pub const sff_module_caps_e_SFF_MODULE_CAPS_F_100: sff_module_caps_e = 1;
pub const sff_module_caps_e_SFF_MODULE_CAPS_F_1G: sff_module_caps_e = 2;
pub const sff_module_caps_e_SFF_MODULE_CAPS_F_10G: sff_module_caps_e = 4;
pub const sff_module_caps_e_SFF_MODULE_CAPS_F_40G: sff_module_caps_e = 8;
pub const sff_module_caps_e_SFF_MODULE_CAPS_F_100G: sff_module_caps_e = 16;
#[doc = " sff_module_caps"]
pub type sff_module_caps_e = ::std::os::raw::c_uint;
#[doc = " sff_module_caps"]
pub use self::sff_module_caps_e as sff_module_caps_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn sff_module_caps_name(e: sff_module_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn sff_module_caps_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut sff_module_caps_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn sff_module_caps_desc(e: sff_module_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn sff_module_caps_valid(e: sff_module_caps_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " sff_module_caps_map table."]
    pub static mut sff_module_caps_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " sff_module_caps_desc_map table."]
    pub static mut sff_module_caps_desc_map: [aim_map_si_t; 0usize];
}
pub const sff_module_type_e_SFF_MODULE_TYPE_100G_AOC: sff_module_type_e = 0;
pub const sff_module_type_e_SFF_MODULE_TYPE_100G_BASE_CR4: sff_module_type_e = 1;
pub const sff_module_type_e_SFF_MODULE_TYPE_100G_BASE_SR4: sff_module_type_e = 2;
pub const sff_module_type_e_SFF_MODULE_TYPE_100G_BASE_LR4: sff_module_type_e = 3;
pub const sff_module_type_e_SFF_MODULE_TYPE_100G_CWDM4: sff_module_type_e = 4;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_CR4: sff_module_type_e = 5;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_SR4: sff_module_type_e = 6;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_LR4: sff_module_type_e = 7;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_LM4: sff_module_type_e = 8;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_ACTIVE: sff_module_type_e = 9;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_CR: sff_module_type_e = 10;
pub const sff_module_type_e_SFF_MODULE_TYPE_40G_BASE_SR2: sff_module_type_e = 11;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_SR: sff_module_type_e = 12;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_LR: sff_module_type_e = 13;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_LRM: sff_module_type_e = 14;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_ER: sff_module_type_e = 15;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_CR: sff_module_type_e = 16;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_SX: sff_module_type_e = 17;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_LX: sff_module_type_e = 18;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_ZR: sff_module_type_e = 19;
pub const sff_module_type_e_SFF_MODULE_TYPE_10G_BASE_SRL: sff_module_type_e = 20;
pub const sff_module_type_e_SFF_MODULE_TYPE_1G_BASE_SX: sff_module_type_e = 21;
pub const sff_module_type_e_SFF_MODULE_TYPE_1G_BASE_LX: sff_module_type_e = 22;
pub const sff_module_type_e_SFF_MODULE_TYPE_1G_BASE_CX: sff_module_type_e = 23;
pub const sff_module_type_e_SFF_MODULE_TYPE_1G_BASE_T: sff_module_type_e = 24;
pub const sff_module_type_e_SFF_MODULE_TYPE_100_BASE_LX: sff_module_type_e = 25;
pub const sff_module_type_e_SFF_MODULE_TYPE_100_BASE_FX: sff_module_type_e = 26;
pub const sff_module_type_e_SFF_MODULE_TYPE_LAST: sff_module_type_e = 26;
pub const sff_module_type_e_SFF_MODULE_TYPE_COUNT: sff_module_type_e = 27;
pub const sff_module_type_e_SFF_MODULE_TYPE_INVALID: sff_module_type_e = -1;
#[doc = " sff_module_type"]
pub type sff_module_type_e = ::std::os::raw::c_int;
#[doc = " sff_module_type"]
pub use self::sff_module_type_e as sff_module_type_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn sff_module_type_name(e: sff_module_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn sff_module_type_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut sff_module_type_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn sff_module_type_desc(e: sff_module_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " sff_module_type_map table."]
    pub static mut sff_module_type_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " sff_module_type_desc_map table."]
    pub static mut sff_module_type_desc_map: [aim_map_si_t; 0usize];
}
pub const sff_sfp_type_e_SFF_SFP_TYPE_SFP: sff_sfp_type_e = 0;
pub const sff_sfp_type_e_SFF_SFP_TYPE_QSFP: sff_sfp_type_e = 1;
pub const sff_sfp_type_e_SFF_SFP_TYPE_QSFP_PLUS: sff_sfp_type_e = 2;
pub const sff_sfp_type_e_SFF_SFP_TYPE_QSFP28: sff_sfp_type_e = 3;
pub const sff_sfp_type_e_SFF_SFP_TYPE_LAST: sff_sfp_type_e = 3;
pub const sff_sfp_type_e_SFF_SFP_TYPE_COUNT: sff_sfp_type_e = 4;
pub const sff_sfp_type_e_SFF_SFP_TYPE_INVALID: sff_sfp_type_e = -1;
#[doc = " sff_sfp_type"]
pub type sff_sfp_type_e = ::std::os::raw::c_int;
#[doc = " sff_sfp_type"]
pub use self::sff_sfp_type_e as sff_sfp_type_t;
extern "C" {
    #[doc = " Enum names."]
    pub fn sff_sfp_type_name(e: sff_sfp_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn sff_sfp_type_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut sff_sfp_type_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn sff_sfp_type_desc(e: sff_sfp_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " sff_sfp_type_map table."]
    pub static mut sff_sfp_type_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " sff_sfp_type_desc_map table."]
    pub static mut sff_sfp_type_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " @brief Determine the SFP type (from the idprom data).\n @param idprom The SFF idprom."]
    pub fn sff_sfp_type_get(idprom: *const u8) -> sff_sfp_type_t;
}
extern "C" {
    #[doc = " @brief Determine the SFF module type (from the idprom data).\n @param idprom The SFF idprom."]
    pub fn sff_module_type_get(idprom: *const u8) -> sff_module_type_t;
}
extern "C" {
    #[doc = " @brief Determine the SFF Media type (from the idprom data)./\n @param idprom The SFF idprom."]
    pub fn sff_media_type_get(mt: sff_module_type_t) -> sff_media_type_t;
}
extern "C" {
    #[doc = " @brief Determine the SFF module capabilities (from the idprom data).\n @param idprom The SFF idprom.\n @param caps [out] Receives the capabilities.\n @returns 0 on successful parse.\n @returns < 0 on error."]
    pub fn sff_module_caps_get(mt: sff_module_type_t, caps: *mut u32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sff_info_s {
    #[doc = " Vendor Name"]
    pub vendor: [::std::os::raw::c_char; 17usize],
    #[doc = " Model Number"]
    pub model: [::std::os::raw::c_char; 17usize],
    #[doc = " Serial Number"]
    pub serial: [::std::os::raw::c_char; 17usize],
    #[doc = " SFP Type"]
    pub sfp_type: sff_sfp_type_t,
    #[doc = " SFP Type Name"]
    pub sfp_type_name: *const ::std::os::raw::c_char,
    #[doc = " Module Type"]
    pub module_type: sff_module_type_t,
    #[doc = " Module Type Name"]
    pub module_type_name: *const ::std::os::raw::c_char,
    #[doc = " Media Type"]
    pub media_type: sff_media_type_t,
    #[doc = " Media Type Name"]
    pub media_type_name: *const ::std::os::raw::c_char,
    #[doc = " Capabilities"]
    pub caps: sff_module_caps_t,
    #[doc = " Cable length, if available"]
    pub length: ::std::os::raw::c_int,
    pub length_desc: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sff_info_s"][::std::mem::size_of::<sff_info_s>() - 120usize];
    ["Alignment of sff_info_s"][::std::mem::align_of::<sff_info_s>() - 8usize];
    ["Offset of field: sff_info_s::vendor"][::std::mem::offset_of!(sff_info_s, vendor) - 0usize];
    ["Offset of field: sff_info_s::model"][::std::mem::offset_of!(sff_info_s, model) - 17usize];
    ["Offset of field: sff_info_s::serial"][::std::mem::offset_of!(sff_info_s, serial) - 34usize];
    ["Offset of field: sff_info_s::sfp_type"]
        [::std::mem::offset_of!(sff_info_s, sfp_type) - 52usize];
    ["Offset of field: sff_info_s::sfp_type_name"]
        [::std::mem::offset_of!(sff_info_s, sfp_type_name) - 56usize];
    ["Offset of field: sff_info_s::module_type"]
        [::std::mem::offset_of!(sff_info_s, module_type) - 64usize];
    ["Offset of field: sff_info_s::module_type_name"]
        [::std::mem::offset_of!(sff_info_s, module_type_name) - 72usize];
    ["Offset of field: sff_info_s::media_type"]
        [::std::mem::offset_of!(sff_info_s, media_type) - 80usize];
    ["Offset of field: sff_info_s::media_type_name"]
        [::std::mem::offset_of!(sff_info_s, media_type_name) - 88usize];
    ["Offset of field: sff_info_s::caps"][::std::mem::offset_of!(sff_info_s, caps) - 96usize];
    ["Offset of field: sff_info_s::length"][::std::mem::offset_of!(sff_info_s, length) - 100usize];
    ["Offset of field: sff_info_s::length_desc"]
        [::std::mem::offset_of!(sff_info_s, length_desc) - 104usize];
};
pub type sff_info_t = sff_info_s;
#[doc = " SFF Module Information Structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sff_eeprom_s {
    #[doc = " Raw eeprom data"]
    pub eeprom: [u8; 256usize],
    #[doc = " computed checksums for eeprom contents"]
    pub cc_base: u8,
    pub cc_ext: u8,
    #[doc = " Whether this EEPROM was successfully parsed and identified."]
    pub identified: ::std::os::raw::c_int,
    #[doc = " Parsed SFF Information"]
    pub info: sff_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sff_eeprom_s"][::std::mem::size_of::<sff_eeprom_s>() - 384usize];
    ["Alignment of sff_eeprom_s"][::std::mem::align_of::<sff_eeprom_s>() - 8usize];
    ["Offset of field: sff_eeprom_s::eeprom"]
        [::std::mem::offset_of!(sff_eeprom_s, eeprom) - 0usize];
    ["Offset of field: sff_eeprom_s::cc_base"]
        [::std::mem::offset_of!(sff_eeprom_s, cc_base) - 256usize];
    ["Offset of field: sff_eeprom_s::cc_ext"]
        [::std::mem::offset_of!(sff_eeprom_s, cc_ext) - 257usize];
    ["Offset of field: sff_eeprom_s::identified"]
        [::std::mem::offset_of!(sff_eeprom_s, identified) - 260usize];
    ["Offset of field: sff_eeprom_s::info"][::std::mem::offset_of!(sff_eeprom_s, info) - 264usize];
};
#[doc = " SFF Module Information Structure"]
pub type sff_eeprom_t = sff_eeprom_s;
extern "C" {
    #[doc = " @brief Initialize an SFF module information structure.\n @param rv [out] Receives the data.\n @param eeprom Raw EEPROM data.\n @note if eeprom is != NULL it will be copied into rv->eeprom first.\n @note if eeprom is NULL it is assumed the rv->eeprom buffer\n has already been initialized."]
    pub fn sff_eeprom_parse(rv: *mut sff_eeprom_t, eeprom: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Initialize an SFF module information structure from a file.\n @param rv [out] Receives thh data.\n @param fname The filename."]
    pub fn sff_eeprom_parse_file(
        rv: *mut sff_eeprom_t,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Clear an sff_eeprom_t structure.\n @param eeprom The eeprom structure."]
    pub fn sff_eeprom_invalidate(info: *mut sff_eeprom_t);
}
extern "C" {
    #[doc = " @brief Determine if this is a valid SFP\n     (whether or not we can parse it)\n @param info The info structure.\n @param verbose Whether to report errors on invalid contents."]
    pub fn sff_eeprom_validate(
        info: *mut sff_eeprom_t,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Show an sff info structure.\n @param info The info structure.\n @param pvs The output pvs."]
    pub fn sff_info_show(info: *mut sff_info_t, pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " @brief Populate an SFF info structure from a module type."]
    pub fn sff_info_from_module_type(
        info: *mut sff_info_t,
        st: sff_sfp_type_t,
        mt: sff_module_type_t,
    ) -> ::std::os::raw::c_int;
}
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_RESET: onlp_sfp_control_e = 0;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_RESET_STATE: onlp_sfp_control_e = 1;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_RX_LOS: onlp_sfp_control_e = 2;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_TX_FAULT: onlp_sfp_control_e = 3;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_TX_DISABLE: onlp_sfp_control_e = 4;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_TX_DISABLE_CHANNEL: onlp_sfp_control_e = 5;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_LP_MODE: onlp_sfp_control_e = 6;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_SOFT_RATE_SELECT: onlp_sfp_control_e = 7;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_POWER_OVERRIDE: onlp_sfp_control_e = 8;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_LAST: onlp_sfp_control_e = 8;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_COUNT: onlp_sfp_control_e = 9;
pub const onlp_sfp_control_e_ONLP_SFP_CONTROL_INVALID: onlp_sfp_control_e = -1;
#[doc = " onlp_sfp_control"]
pub type onlp_sfp_control_e = ::std::os::raw::c_int;
#[doc = " onlp_sfp_control"]
pub use self::onlp_sfp_control_e as onlp_sfp_control_t;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_RESET: onlp_sfp_control_flag_e = 1;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_RESET_STATE: onlp_sfp_control_flag_e = 2;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_RX_LOS: onlp_sfp_control_flag_e = 4;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_TX_FAULT: onlp_sfp_control_flag_e = 8;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_TX_DISABLE: onlp_sfp_control_flag_e = 16;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_TX_DISABLE_CHANNEL:
    onlp_sfp_control_flag_e = 32;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_LP_MODE: onlp_sfp_control_flag_e = 64;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_SOFT_RATE_SELECT: onlp_sfp_control_flag_e =
    128;
pub const onlp_sfp_control_flag_e_ONLP_SFP_CONTROL_FLAG_POWER_OVERRIDE: onlp_sfp_control_flag_e =
    256;
#[doc = " onlp_sfp_control_flag"]
pub type onlp_sfp_control_flag_e = ::std::os::raw::c_uint;
#[doc = " onlp_sfp_control_flag"]
pub use self::onlp_sfp_control_flag_e as onlp_sfp_control_flag_t;
extern "C" {
    #[doc = " Initialize the SFP subsystem."]
    pub fn onlp_sfp_init() -> ::std::os::raw::c_int;
}
#[doc = " Valid SFP Port bitmaps are communicated using this type."]
pub type onlp_sfp_bitmap_t = aim_bitmap256_t;
extern "C" {
    #[doc = " Convenience function for initializing SFP bitmaps.\n @param bmap The address of the bitmap to initialize."]
    pub fn onlp_sfp_bitmap_t_init(bmap: *mut onlp_sfp_bitmap_t);
}
extern "C" {
    #[doc = " @brief Get the set of valid {Q}SFP ports.\n @param bmap Returns the valid set of SFP-capable port numbers."]
    pub fn onlp_sfp_bitmap_get(bmap: *mut onlp_sfp_bitmap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Determine if a given port number is a valid SFP port.\n @param port The port number."]
    pub fn onlp_sfp_port_valid(port: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Determine if an SFP is currently plugged in.\n @param port The SFP port number.\n @returns 1 if an SFP is present.\n @returns 0 if an SFP is not present.\n @returns <0 on error."]
    pub fn onlp_sfp_is_present(port: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Return the presence bitmap for all ports.\n @param dst The receives the presence bitmap for all ports.\n @note This function can return Unsupported.\n It will not be emulated if the SFPI driver does not support\n batch collection of the SFP presence."]
    pub fn onlp_sfp_presence_bitmap_get(dst: *mut onlp_sfp_bitmap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Read IEEE standard EEPROM data from the given port.\n @param port The SFP Port\n @param rv Receives a buffer containing the EEPROM data.\n @notes The buffer must be freed after use.\n @returns The size of the eeprom data, if successful\n @returns -1 on error."]
    pub fn onlp_sfp_eeprom_read(
        port: ::std::os::raw::c_int,
        rv: *mut *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Read the DOM data from the given port.\n @param port The SFP Port\n @param rv Receives a buffer containing the DOM data.\n @notes The buffer must be freed after use.\n @returns The size of the eeprom data, if successful\n @returns -1 on error.\n @note This should only be called if the SFP\n has advertised DOM support."]
    pub fn onlp_sfp_dom_read(
        port: ::std::os::raw::c_int,
        rv: *mut *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Deinitialize the SFP subsystem."]
    pub fn onlp_sfp_denit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the RX_LOS bitmap for all ports.\n @param dst Receives the RX_LOS bitmap for all ports.\n @note This function can return Unsupported.\n It will not be emulated if the SFPI driver does not support\n batch collection of the rx_los status."]
    pub fn onlp_sfp_rx_los_bitmap_get(dst: *mut onlp_sfp_bitmap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Read a byte from an address on the given SFP port's bus.\n @param port The port number.\n @param devaddr The device address.\n @param addr The address."]
    pub fn onlp_sfp_dev_readb(
        port: ::std::os::raw::c_int,
        devaddr: u8,
        addr: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Write a byte to an address on the given SFP port's bus."]
    pub fn onlp_sfp_dev_writeb(
        port: ::std::os::raw::c_int,
        devaddr: u8,
        addr: u8,
        value: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Read a byte from an address on the given SFP port's bus.\n @param port The port number.\n @param devaddr The device address.\n @param addr The address."]
    pub fn onlp_sfp_dev_readw(
        port: ::std::os::raw::c_int,
        devaddr: u8,
        addr: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Write a byte to an address on the given SFP port's bus."]
    pub fn onlp_sfp_dev_writew(
        port: ::std::os::raw::c_int,
        devaddr: u8,
        addr: u8,
        value: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Dump the status of all SFPs\n @param pvs The output pvs."]
    pub fn onlp_sfp_dump(pvs: *mut aim_pvs_t);
}
extern "C" {
    #[doc = " @brief Issue an ioctl to the SFP interface.\n @param port The port.\n @param ... Ioctl arguments."]
    pub fn onlp_sfp_ioctl(port: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Issue an ioctl to the SFP interface.\n @param port The port.\n @param vargs Ioctl arguments."]
    pub fn onlp_sfp_vioctl(port: ::std::os::raw::c_int, vargs: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Call the SFP post-insertion handler.\n"]
    pub fn onlp_sfp_post_insert(
        port: ::std::os::raw::c_int,
        info: *mut sff_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set an SFP control.\n @param port The port.\n @param control The control.\n @param value The value."]
    pub fn onlp_sfp_control_set(
        port: ::std::os::raw::c_int,
        control: onlp_sfp_control_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get an SFP control.\n @param port The port.\n @param control The control\n @param [out] value Receives the current value."]
    pub fn onlp_sfp_control_get(
        port: ::std::os::raw::c_int,
        control: onlp_sfp_control_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the value of all SFP controls.\n @param port The port.\n @param flags Receives the control flag values. See onlp_sfp_control_flags_t"]
    pub fn onlp_sfp_control_flags_get(
        port: ::std::os::raw::c_int,
        flags: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_sfp_control_name(e: onlp_sfp_control_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_sfp_control_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_sfp_control_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_sfp_control_desc(e: onlp_sfp_control_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " onlp_sfp_control_map table."]
    pub static mut onlp_sfp_control_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_sfp_control_desc_map table."]
    pub static mut onlp_sfp_control_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_sfp_control_flag_name(e: onlp_sfp_control_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_sfp_control_flag_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_sfp_control_flag_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_sfp_control_flag_desc(e: onlp_sfp_control_flag_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_sfp_control_flag_valid(e: onlp_sfp_control_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_sfp_control_flag_map table."]
    pub static mut onlp_sfp_control_flag_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_sfp_control_flag_desc_map table."]
    pub static mut onlp_sfp_control_flag_desc_map: [aim_map_si_t; 0usize];
}
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_B2F: onlp_fan_caps_e = 1;
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_F2B: onlp_fan_caps_e = 2;
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_SET_RPM: onlp_fan_caps_e = 4;
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_SET_PERCENTAGE: onlp_fan_caps_e = 8;
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_GET_RPM: onlp_fan_caps_e = 16;
pub const onlp_fan_caps_e_ONLP_FAN_CAPS_GET_PERCENTAGE: onlp_fan_caps_e = 32;
#[doc = " onlp_fan_caps"]
pub type onlp_fan_caps_e = ::std::os::raw::c_uint;
#[doc = " onlp_fan_caps"]
pub use self::onlp_fan_caps_e as onlp_fan_caps_t;
pub const onlp_fan_dir_e_ONLP_FAN_DIR_B2F: onlp_fan_dir_e = 0;
pub const onlp_fan_dir_e_ONLP_FAN_DIR_F2B: onlp_fan_dir_e = 1;
pub const onlp_fan_dir_e_ONLP_FAN_DIR_LAST: onlp_fan_dir_e = 1;
pub const onlp_fan_dir_e_ONLP_FAN_DIR_COUNT: onlp_fan_dir_e = 2;
pub const onlp_fan_dir_e_ONLP_FAN_DIR_INVALID: onlp_fan_dir_e = -1;
#[doc = " onlp_fan_dir"]
pub type onlp_fan_dir_e = ::std::os::raw::c_int;
#[doc = " onlp_fan_dir"]
pub use self::onlp_fan_dir_e as onlp_fan_dir_t;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_OFF: onlp_fan_mode_e = 0;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_SLOW: onlp_fan_mode_e = 1;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_NORMAL: onlp_fan_mode_e = 2;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_FAST: onlp_fan_mode_e = 3;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_MAX: onlp_fan_mode_e = 4;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_LAST: onlp_fan_mode_e = 4;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_COUNT: onlp_fan_mode_e = 5;
pub const onlp_fan_mode_e_ONLP_FAN_MODE_INVALID: onlp_fan_mode_e = -1;
#[doc = " onlp_fan_mode"]
pub type onlp_fan_mode_e = ::std::os::raw::c_int;
#[doc = " onlp_fan_mode"]
pub use self::onlp_fan_mode_e as onlp_fan_mode_t;
pub const onlp_fan_status_e_ONLP_FAN_STATUS_PRESENT: onlp_fan_status_e = 1;
pub const onlp_fan_status_e_ONLP_FAN_STATUS_FAILED: onlp_fan_status_e = 2;
pub const onlp_fan_status_e_ONLP_FAN_STATUS_B2F: onlp_fan_status_e = 4;
pub const onlp_fan_status_e_ONLP_FAN_STATUS_F2B: onlp_fan_status_e = 8;
#[doc = " onlp_fan_status"]
pub type onlp_fan_status_e = ::std::os::raw::c_uint;
#[doc = " onlp_fan_status"]
pub use self::onlp_fan_status_e as onlp_fan_status_t;
#[doc = " Fan information structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_fan_info_s {
    #[doc = " OID Header"]
    pub hdr: onlp_oid_hdr_t,
    pub status: u32,
    pub caps: u32,
    pub rpm: ::std::os::raw::c_int,
    pub percentage: ::std::os::raw::c_int,
    pub mode: onlp_fan_mode_t,
    pub model: [::std::os::raw::c_char; 64usize],
    pub serial: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_fan_info_s"][::std::mem::size_of::<onlp_fan_info_s>() - 796usize];
    ["Alignment of onlp_fan_info_s"][::std::mem::align_of::<onlp_fan_info_s>() - 4usize];
    ["Offset of field: onlp_fan_info_s::hdr"]
        [::std::mem::offset_of!(onlp_fan_info_s, hdr) - 0usize];
    ["Offset of field: onlp_fan_info_s::status"]
        [::std::mem::offset_of!(onlp_fan_info_s, status) - 648usize];
    ["Offset of field: onlp_fan_info_s::caps"]
        [::std::mem::offset_of!(onlp_fan_info_s, caps) - 652usize];
    ["Offset of field: onlp_fan_info_s::rpm"]
        [::std::mem::offset_of!(onlp_fan_info_s, rpm) - 656usize];
    ["Offset of field: onlp_fan_info_s::percentage"]
        [::std::mem::offset_of!(onlp_fan_info_s, percentage) - 660usize];
    ["Offset of field: onlp_fan_info_s::mode"]
        [::std::mem::offset_of!(onlp_fan_info_s, mode) - 664usize];
    ["Offset of field: onlp_fan_info_s::model"]
        [::std::mem::offset_of!(onlp_fan_info_s, model) - 668usize];
    ["Offset of field: onlp_fan_info_s::serial"]
        [::std::mem::offset_of!(onlp_fan_info_s, serial) - 732usize];
};
#[doc = " Fan information structure."]
pub type onlp_fan_info_t = onlp_fan_info_s;
extern "C" {
    #[doc = " @brief Initialize the fan subsystem."]
    pub fn onlp_fan_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve fan information.\n @param id The fan OID.\n @param rv [out] Receives the fan information."]
    pub fn onlp_fan_info_get(id: onlp_oid_t, rv: *mut onlp_fan_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the fan's operational status.\n @param id The fan OID.\n @param rv [out] Receives the fan's operations status flags.\n @notes Only operational state needs to be returned -\n        PRESENT/FAILED"]
    pub fn onlp_fan_status_get(id: onlp_oid_t, rv: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the fan's OID hdr.\n @param id The fan OID.\n @param rv [out] Receives the OID header."]
    pub fn onlp_fan_hdr_get(id: onlp_oid_t, hdr: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the fan speed in RPMs.\n @param id The fan OID.\n @param rpm The new RPM.\n @note Only valid if the fan has the SET_RPM capability."]
    pub fn onlp_fan_rpm_set(id: onlp_oid_t, rpm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the fan speed in percentage.\n @param id The fan OID.\n @param p The percentage.\n @note Only valid if the fan has the SET_PERCENTAGE capability."]
    pub fn onlp_fan_percentage_set(
        id: onlp_oid_t,
        p: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the fan speed by mode.\n @param id The fan OID.\n @param mode The fan mode value."]
    pub fn onlp_fan_mode_set(id: onlp_oid_t, mode: onlp_fan_mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the fan direction.\n @param id The fan OID.\n @param dir The fan direction (B2F or F2B)\n @notes Only called if both capabilities are set."]
    pub fn onlp_fan_dir_set(id: onlp_oid_t, dir: onlp_fan_dir_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Fan OID debug dump.\n @param id The fan OID.\n @param pvs The output pvs.\n @param flags The output flags."]
    pub fn onlp_fan_dump(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief Show the given Fan OID.\n @param id The Fan OID\n @param pvs The output pvs\n @param flags The output flags."]
    pub fn onlp_fan_show(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_fan_caps_name(e: onlp_fan_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_fan_caps_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_fan_caps_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_fan_caps_desc(e: onlp_fan_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_fan_caps_valid(e: onlp_fan_caps_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_fan_caps_map table."]
    pub static mut onlp_fan_caps_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_fan_caps_desc_map table."]
    pub static mut onlp_fan_caps_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_fan_dir_name(e: onlp_fan_dir_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_fan_dir_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_fan_dir_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_fan_dir_desc(e: onlp_fan_dir_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " onlp_fan_dir_map table."]
    pub static mut onlp_fan_dir_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_fan_dir_desc_map table."]
    pub static mut onlp_fan_dir_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_fan_mode_name(e: onlp_fan_mode_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_fan_mode_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_fan_mode_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_fan_mode_desc(e: onlp_fan_mode_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " onlp_fan_mode_map table."]
    pub static mut onlp_fan_mode_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_fan_mode_desc_map table."]
    pub static mut onlp_fan_mode_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_fan_status_name(e: onlp_fan_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_fan_status_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_fan_status_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_fan_status_desc(e: onlp_fan_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_fan_status_valid(e: onlp_fan_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_fan_status_map table."]
    pub static mut onlp_fan_status_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_fan_status_desc_map table."]
    pub static mut onlp_fan_status_desc_map: [aim_map_si_t; 0usize];
}
pub const onlp_led_caps_e_ONLP_LED_CAPS_ON_OFF: onlp_led_caps_e = 1;
pub const onlp_led_caps_e_ONLP_LED_CAPS_CHAR: onlp_led_caps_e = 2;
pub const onlp_led_caps_e_ONLP_LED_CAPS_RED: onlp_led_caps_e = 1024;
pub const onlp_led_caps_e_ONLP_LED_CAPS_RED_BLINKING: onlp_led_caps_e = 2048;
pub const onlp_led_caps_e_ONLP_LED_CAPS_ORANGE: onlp_led_caps_e = 4096;
pub const onlp_led_caps_e_ONLP_LED_CAPS_ORANGE_BLINKING: onlp_led_caps_e = 8192;
pub const onlp_led_caps_e_ONLP_LED_CAPS_YELLOW: onlp_led_caps_e = 16384;
pub const onlp_led_caps_e_ONLP_LED_CAPS_YELLOW_BLINKING: onlp_led_caps_e = 32768;
pub const onlp_led_caps_e_ONLP_LED_CAPS_GREEN: onlp_led_caps_e = 65536;
pub const onlp_led_caps_e_ONLP_LED_CAPS_GREEN_BLINKING: onlp_led_caps_e = 131072;
pub const onlp_led_caps_e_ONLP_LED_CAPS_BLUE: onlp_led_caps_e = 262144;
pub const onlp_led_caps_e_ONLP_LED_CAPS_BLUE_BLINKING: onlp_led_caps_e = 524288;
pub const onlp_led_caps_e_ONLP_LED_CAPS_PURPLE: onlp_led_caps_e = 1048576;
pub const onlp_led_caps_e_ONLP_LED_CAPS_PURPLE_BLINKING: onlp_led_caps_e = 2097152;
pub const onlp_led_caps_e_ONLP_LED_CAPS_AUTO: onlp_led_caps_e = 4194304;
pub const onlp_led_caps_e_ONLP_LED_CAPS_AUTO_BLINKING: onlp_led_caps_e = 8388608;
#[doc = " onlp_led_caps"]
pub type onlp_led_caps_e = ::std::os::raw::c_uint;
#[doc = " onlp_led_caps"]
pub use self::onlp_led_caps_e as onlp_led_caps_t;
pub const onlp_led_mode_e_ONLP_LED_MODE_OFF: onlp_led_mode_e = 0;
pub const onlp_led_mode_e_ONLP_LED_MODE_ON: onlp_led_mode_e = 1;
pub const onlp_led_mode_e_ONLP_LED_MODE_BLINKING: onlp_led_mode_e = 2;
pub const onlp_led_mode_e_ONLP_LED_MODE_RED: onlp_led_mode_e = 10;
pub const onlp_led_mode_e_ONLP_LED_MODE_RED_BLINKING: onlp_led_mode_e = 11;
pub const onlp_led_mode_e_ONLP_LED_MODE_ORANGE: onlp_led_mode_e = 12;
pub const onlp_led_mode_e_ONLP_LED_MODE_ORANGE_BLINKING: onlp_led_mode_e = 13;
pub const onlp_led_mode_e_ONLP_LED_MODE_YELLOW: onlp_led_mode_e = 14;
pub const onlp_led_mode_e_ONLP_LED_MODE_YELLOW_BLINKING: onlp_led_mode_e = 15;
pub const onlp_led_mode_e_ONLP_LED_MODE_GREEN: onlp_led_mode_e = 16;
pub const onlp_led_mode_e_ONLP_LED_MODE_GREEN_BLINKING: onlp_led_mode_e = 17;
pub const onlp_led_mode_e_ONLP_LED_MODE_BLUE: onlp_led_mode_e = 18;
pub const onlp_led_mode_e_ONLP_LED_MODE_BLUE_BLINKING: onlp_led_mode_e = 19;
pub const onlp_led_mode_e_ONLP_LED_MODE_PURPLE: onlp_led_mode_e = 20;
pub const onlp_led_mode_e_ONLP_LED_MODE_PURPLE_BLINKING: onlp_led_mode_e = 21;
pub const onlp_led_mode_e_ONLP_LED_MODE_AUTO: onlp_led_mode_e = 22;
pub const onlp_led_mode_e_ONLP_LED_MODE_AUTO_BLINKING: onlp_led_mode_e = 23;
#[doc = " onlp_led_mode"]
pub type onlp_led_mode_e = ::std::os::raw::c_uint;
#[doc = " onlp_led_mode"]
pub use self::onlp_led_mode_e as onlp_led_mode_t;
pub const onlp_led_status_e_ONLP_LED_STATUS_PRESENT: onlp_led_status_e = 1;
pub const onlp_led_status_e_ONLP_LED_STATUS_FAILED: onlp_led_status_e = 2;
pub const onlp_led_status_e_ONLP_LED_STATUS_ON: onlp_led_status_e = 4;
#[doc = " onlp_led_status"]
pub type onlp_led_status_e = ::std::os::raw::c_uint;
#[doc = " onlp_led_status"]
pub use self::onlp_led_status_e as onlp_led_status_t;
#[doc = " LED information structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_led_info_s {
    #[doc = " Header"]
    pub hdr: onlp_oid_hdr_t,
    #[doc = " Status"]
    pub status: u32,
    #[doc = " Capabilities"]
    pub caps: u32,
    #[doc = " Current mode, if capable."]
    pub mode: onlp_led_mode_t,
    #[doc = " Current char, if capable."]
    pub character: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_led_info_s"][::std::mem::size_of::<onlp_led_info_s>() - 664usize];
    ["Alignment of onlp_led_info_s"][::std::mem::align_of::<onlp_led_info_s>() - 4usize];
    ["Offset of field: onlp_led_info_s::hdr"]
        [::std::mem::offset_of!(onlp_led_info_s, hdr) - 0usize];
    ["Offset of field: onlp_led_info_s::status"]
        [::std::mem::offset_of!(onlp_led_info_s, status) - 648usize];
    ["Offset of field: onlp_led_info_s::caps"]
        [::std::mem::offset_of!(onlp_led_info_s, caps) - 652usize];
    ["Offset of field: onlp_led_info_s::mode"]
        [::std::mem::offset_of!(onlp_led_info_s, mode) - 656usize];
    ["Offset of field: onlp_led_info_s::character"]
        [::std::mem::offset_of!(onlp_led_info_s, character) - 660usize];
};
#[doc = " LED information structure."]
pub type onlp_led_info_t = onlp_led_info_s;
extern "C" {
    #[doc = " @brief Initialize the LED subsystem."]
    pub fn onlp_led_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get LED information.\n @param id The LED OID\n @param rv [out] Receives the information structure."]
    pub fn onlp_led_info_get(id: onlp_oid_t, rv: *mut onlp_led_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the LED operational status.\n @param id The LED OID\n @param rv [out] Receives the operational status."]
    pub fn onlp_led_status_get(id: onlp_oid_t, rv: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the LED header.\n @param id The LED OID\n @param rv [out] Receives the header."]
    pub fn onlp_led_hdr_get(id: onlp_oid_t, rv: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Turn an LED on or off.\n @param id The LED OID\n @param on_or_off Led on (1) or LED off (0)\n @param Relevant if the LED has the ON_OFF capability.\n @note For the purposes of this function the\n interpretation of \"on\" for multi-mode or multi-color LEDs\n is up to the platform implementation."]
    pub fn onlp_led_set(id: onlp_oid_t, on_or_off: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the LED color\n @param id The LED OID\n @param color The color.\n @note Only relevant if the LED supports the color capability."]
    pub fn onlp_led_mode_set(id: onlp_oid_t, color: onlp_led_mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the LED char\n @param id The LED OID\n @param c The character.\n @note Only relevant if the LED supports the char capability."]
    pub fn onlp_led_char_set(id: onlp_oid_t, c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief LED OID debug dump\n @param id The LED OID\n @param pvs The output pvs\n @param flags The output flags"]
    pub fn onlp_led_dump(oid: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief Show the given LED OID.\n @param id The LED OID\n @param pvs The output pvs\n @param flags The output flags"]
    pub fn onlp_led_show(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_led_caps_name(e: onlp_led_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_led_caps_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_led_caps_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_led_caps_desc(e: onlp_led_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_led_caps_valid(e: onlp_led_caps_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_led_caps_map table."]
    pub static mut onlp_led_caps_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_led_caps_desc_map table."]
    pub static mut onlp_led_caps_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_led_mode_name(e: onlp_led_mode_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_led_mode_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_led_mode_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_led_mode_desc(e: onlp_led_mode_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_led_mode_valid(e: onlp_led_mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_led_mode_map table."]
    pub static mut onlp_led_mode_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_led_mode_desc_map table."]
    pub static mut onlp_led_mode_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_led_status_name(e: onlp_led_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_led_status_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_led_status_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_led_status_desc(e: onlp_led_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_led_status_valid(e: onlp_led_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_led_status_map table."]
    pub static mut onlp_led_status_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_led_status_desc_map table."]
    pub static mut onlp_led_status_desc_map: [aim_map_si_t; 0usize];
}
pub const onlp_thermal_caps_e_ONLP_THERMAL_CAPS_GET_TEMPERATURE: onlp_thermal_caps_e = 1;
pub const onlp_thermal_caps_e_ONLP_THERMAL_CAPS_GET_WARNING_THRESHOLD: onlp_thermal_caps_e = 2;
pub const onlp_thermal_caps_e_ONLP_THERMAL_CAPS_GET_ERROR_THRESHOLD: onlp_thermal_caps_e = 4;
pub const onlp_thermal_caps_e_ONLP_THERMAL_CAPS_GET_SHUTDOWN_THRESHOLD: onlp_thermal_caps_e = 8;
#[doc = " onlp_thermal_caps"]
pub type onlp_thermal_caps_e = ::std::os::raw::c_uint;
#[doc = " onlp_thermal_caps"]
pub use self::onlp_thermal_caps_e as onlp_thermal_caps_t;
pub const onlp_thermal_status_e_ONLP_THERMAL_STATUS_PRESENT: onlp_thermal_status_e = 1;
pub const onlp_thermal_status_e_ONLP_THERMAL_STATUS_FAILED: onlp_thermal_status_e = 2;
#[doc = " onlp_thermal_status"]
pub type onlp_thermal_status_e = ::std::os::raw::c_uint;
#[doc = " onlp_thermal_status"]
pub use self::onlp_thermal_status_e as onlp_thermal_status_t;
pub const onlp_thermal_threshold_e_ONLP_THERMAL_THRESHOLD_WARNING_DEFAULT:
    onlp_thermal_threshold_e = 45000;
pub const onlp_thermal_threshold_e_ONLP_THERMAL_THRESHOLD_ERROR_DEFAULT: onlp_thermal_threshold_e =
    55000;
pub const onlp_thermal_threshold_e_ONLP_THERMAL_THRESHOLD_SHUTDOWN_DEFAULT:
    onlp_thermal_threshold_e = 60000;
#[doc = " onlp_thermal_threshold"]
pub type onlp_thermal_threshold_e = ::std::os::raw::c_uint;
#[doc = " onlp_thermal_threshold"]
pub use self::onlp_thermal_threshold_e as onlp_thermal_threshold_t;
#[doc = " Thermal sensor information structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_thermal_info_s {
    #[doc = " OID Header"]
    pub hdr: onlp_oid_hdr_t,
    #[doc = " Status"]
    pub status: u32,
    #[doc = " Capabilities"]
    pub caps: u32,
    pub mcelsius: ::std::os::raw::c_int,
    pub thresholds: onlp_thermal_info_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_thermal_info_s__bindgen_ty_1 {
    pub warning: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub shutdown: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_thermal_info_s__bindgen_ty_1"]
        [::std::mem::size_of::<onlp_thermal_info_s__bindgen_ty_1>() - 12usize];
    ["Alignment of onlp_thermal_info_s__bindgen_ty_1"]
        [::std::mem::align_of::<onlp_thermal_info_s__bindgen_ty_1>() - 4usize];
    ["Offset of field: onlp_thermal_info_s__bindgen_ty_1::warning"]
        [::std::mem::offset_of!(onlp_thermal_info_s__bindgen_ty_1, warning) - 0usize];
    ["Offset of field: onlp_thermal_info_s__bindgen_ty_1::error"]
        [::std::mem::offset_of!(onlp_thermal_info_s__bindgen_ty_1, error) - 4usize];
    ["Offset of field: onlp_thermal_info_s__bindgen_ty_1::shutdown"]
        [::std::mem::offset_of!(onlp_thermal_info_s__bindgen_ty_1, shutdown) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_thermal_info_s"][::std::mem::size_of::<onlp_thermal_info_s>() - 672usize];
    ["Alignment of onlp_thermal_info_s"][::std::mem::align_of::<onlp_thermal_info_s>() - 4usize];
    ["Offset of field: onlp_thermal_info_s::hdr"]
        [::std::mem::offset_of!(onlp_thermal_info_s, hdr) - 0usize];
    ["Offset of field: onlp_thermal_info_s::status"]
        [::std::mem::offset_of!(onlp_thermal_info_s, status) - 648usize];
    ["Offset of field: onlp_thermal_info_s::caps"]
        [::std::mem::offset_of!(onlp_thermal_info_s, caps) - 652usize];
    ["Offset of field: onlp_thermal_info_s::mcelsius"]
        [::std::mem::offset_of!(onlp_thermal_info_s, mcelsius) - 656usize];
    ["Offset of field: onlp_thermal_info_s::thresholds"]
        [::std::mem::offset_of!(onlp_thermal_info_s, thresholds) - 660usize];
};
#[doc = " Thermal sensor information structure."]
pub type onlp_thermal_info_t = onlp_thermal_info_s;
extern "C" {
    #[doc = " @brief Initialize the thermal subsystem."]
    pub fn onlp_thermal_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve information about the given thermal id.\n @param id The thermal oid.\n @param rv [out] Receives the thermal information."]
    pub fn onlp_thermal_info_get(
        id: onlp_oid_t,
        rv: *mut onlp_thermal_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the thermal's operational status.\n @param id The thermal oid.\n @param rv [out] Receives the operational status."]
    pub fn onlp_thermal_status_get(id: onlp_oid_t, rv: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the thermal's oid header.\n @param id The thermal oid.\n @param rv [out] Receives the header."]
    pub fn onlp_thermal_hdr_get(id: onlp_oid_t, rv: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Thermal driver ioctl.\n @param code Thermal ioctl code.\n @param ... Arguments"]
    pub fn onlp_thermal_ioctl(code: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Thermal driver ioctl.\n @param code The thermal ioctl code.\n @param vargs The arguments."]
    pub fn onlp_thermal_vioctl(
        code: ::std::os::raw::c_int,
        vargs: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Thermal OID debug dump.\n @param id The thermal id.\n @param pvs The output pvs.\n @param flags The dump flags."]
    pub fn onlp_thermal_dump(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief Show the given thermal OID.\n @param id The Thermal OID\n @param pvs The output pvs\n @param flags The output flags"]
    pub fn onlp_thermal_show(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_thermal_caps_name(e: onlp_thermal_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_thermal_caps_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_thermal_caps_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_thermal_caps_desc(e: onlp_thermal_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_thermal_caps_valid(e: onlp_thermal_caps_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_thermal_caps_map table."]
    pub static mut onlp_thermal_caps_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_thermal_caps_desc_map table."]
    pub static mut onlp_thermal_caps_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_thermal_status_name(e: onlp_thermal_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_thermal_status_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_thermal_status_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_thermal_status_desc(e: onlp_thermal_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_thermal_status_valid(e: onlp_thermal_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_thermal_status_map table."]
    pub static mut onlp_thermal_status_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_thermal_status_desc_map table."]
    pub static mut onlp_thermal_status_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_thermal_threshold_name(
        e: onlp_thermal_threshold_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_thermal_threshold_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_thermal_threshold_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_thermal_threshold_desc(
        e: onlp_thermal_threshold_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_thermal_threshold_valid(e: onlp_thermal_threshold_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_thermal_threshold_map table."]
    pub static mut onlp_thermal_threshold_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_thermal_threshold_desc_map table."]
    pub static mut onlp_thermal_threshold_desc_map: [aim_map_si_t; 0usize];
}
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_AC: onlp_psu_caps_e = 1;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_DC12: onlp_psu_caps_e = 2;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_DC48: onlp_psu_caps_e = 4;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_VIN: onlp_psu_caps_e = 8;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_VOUT: onlp_psu_caps_e = 16;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_IIN: onlp_psu_caps_e = 32;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_IOUT: onlp_psu_caps_e = 64;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_PIN: onlp_psu_caps_e = 128;
pub const onlp_psu_caps_e_ONLP_PSU_CAPS_POUT: onlp_psu_caps_e = 256;
#[doc = " onlp_psu_caps"]
pub type onlp_psu_caps_e = ::std::os::raw::c_uint;
#[doc = " onlp_psu_caps"]
pub use self::onlp_psu_caps_e as onlp_psu_caps_t;
pub const onlp_psu_status_e_ONLP_PSU_STATUS_PRESENT: onlp_psu_status_e = 1;
pub const onlp_psu_status_e_ONLP_PSU_STATUS_FAILED: onlp_psu_status_e = 2;
pub const onlp_psu_status_e_ONLP_PSU_STATUS_UNPLUGGED: onlp_psu_status_e = 4;
#[doc = " onlp_psu_status"]
pub type onlp_psu_status_e = ::std::os::raw::c_uint;
#[doc = " onlp_psu_status"]
pub use self::onlp_psu_status_e as onlp_psu_status_t;
#[doc = " PSU Information Structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onlp_psu_info_t {
    #[doc = " OID Header"]
    pub hdr: onlp_oid_hdr_t,
    pub model: [::std::os::raw::c_char; 64usize],
    pub serial: [::std::os::raw::c_char; 64usize],
    pub status: u32,
    pub caps: u32,
    pub mvin: ::std::os::raw::c_int,
    pub mvout: ::std::os::raw::c_int,
    pub miin: ::std::os::raw::c_int,
    pub miout: ::std::os::raw::c_int,
    pub mpin: ::std::os::raw::c_int,
    pub mpout: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of onlp_psu_info_t"][::std::mem::size_of::<onlp_psu_info_t>() - 808usize];
    ["Alignment of onlp_psu_info_t"][::std::mem::align_of::<onlp_psu_info_t>() - 4usize];
    ["Offset of field: onlp_psu_info_t::hdr"]
        [::std::mem::offset_of!(onlp_psu_info_t, hdr) - 0usize];
    ["Offset of field: onlp_psu_info_t::model"]
        [::std::mem::offset_of!(onlp_psu_info_t, model) - 648usize];
    ["Offset of field: onlp_psu_info_t::serial"]
        [::std::mem::offset_of!(onlp_psu_info_t, serial) - 712usize];
    ["Offset of field: onlp_psu_info_t::status"]
        [::std::mem::offset_of!(onlp_psu_info_t, status) - 776usize];
    ["Offset of field: onlp_psu_info_t::caps"]
        [::std::mem::offset_of!(onlp_psu_info_t, caps) - 780usize];
    ["Offset of field: onlp_psu_info_t::mvin"]
        [::std::mem::offset_of!(onlp_psu_info_t, mvin) - 784usize];
    ["Offset of field: onlp_psu_info_t::mvout"]
        [::std::mem::offset_of!(onlp_psu_info_t, mvout) - 788usize];
    ["Offset of field: onlp_psu_info_t::miin"]
        [::std::mem::offset_of!(onlp_psu_info_t, miin) - 792usize];
    ["Offset of field: onlp_psu_info_t::miout"]
        [::std::mem::offset_of!(onlp_psu_info_t, miout) - 796usize];
    ["Offset of field: onlp_psu_info_t::mpin"]
        [::std::mem::offset_of!(onlp_psu_info_t, mpin) - 800usize];
    ["Offset of field: onlp_psu_info_t::mpout"]
        [::std::mem::offset_of!(onlp_psu_info_t, mpout) - 804usize];
};
extern "C" {
    #[doc = " @brief Initialize the PSU subsystem."]
    pub fn onlp_psu_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the PSU information.\n @param id The PSU OID.\n @param rv [out] Receives the information structure."]
    pub fn onlp_psu_info_get(id: onlp_oid_t, rv: *mut onlp_psu_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the PSU's operational status.\n @param id The PSU OID.\n @param rv [out] Receives the operational status."]
    pub fn onlp_psu_status_get(id: onlp_oid_t, rv: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the PSU's oid header.\n @param id The PSU OID.\n @param rv [out] Receives the header."]
    pub fn onlp_psu_hdr_get(id: onlp_oid_t, rv: *mut onlp_oid_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Issue a PSU ioctl.\n @param id The PSU OID\n @param ... Ioctl arguments."]
    pub fn onlp_psu_ioctl(id: onlp_oid_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Issue a PSU ioctl.\n @param id The PSU OID\n @param vargs Ioctl arguments."]
    pub fn onlp_psu_vioctl(id: onlp_oid_t, vargs: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief PSU OID debug dump\n @param id The PSU OID\n @param pvs The output pvs\n @param flags The output flags"]
    pub fn onlp_psu_dump(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " @brief Show the given PSU OID.\n @param id The PSU OID\n @param pvs The output pvs\n @param flags The output flags"]
    pub fn onlp_psu_show(id: onlp_oid_t, pvs: *mut aim_pvs_t, flags: u32);
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_psu_caps_name(e: onlp_psu_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_psu_caps_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_psu_caps_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_psu_caps_desc(e: onlp_psu_caps_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_psu_caps_valid(e: onlp_psu_caps_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_psu_caps_map table."]
    pub static mut onlp_psu_caps_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_psu_caps_desc_map table."]
    pub static mut onlp_psu_caps_desc_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " Enum names."]
    pub fn onlp_psu_status_name(e: onlp_psu_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum values."]
    pub fn onlp_psu_status_value(
        str_: *const ::std::os::raw::c_char,
        e: *mut onlp_psu_status_t,
        substr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enum descriptions."]
    pub fn onlp_psu_status_desc(e: onlp_psu_status_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Enum validator."]
    pub fn onlp_psu_status_valid(e: onlp_psu_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " onlp_psu_status_map table."]
    pub static mut onlp_psu_status_map: [aim_map_si_t; 0usize];
}
extern "C" {
    #[doc = " onlp_psu_status_desc_map table."]
    pub static mut onlp_psu_status_desc_map: [aim_map_si_t; 0usize];
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
